{
  "address": "0x58D608Cf3195f1db39f7B2735f8Aa1848194ca06",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoosterDepositFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotSweepToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurveGaugeIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurveLpIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CurvePoolZapIsNull",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollectorNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectLpToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedToSendEther",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughAmountOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOneEthAllowedInUnderlying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardClaimFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnstakeFromConvexFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "oldMasterOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlippage",
          "type": "uint256"
        }
      ],
      "name": "SlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "WithdrawOneCoinToggled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "contract ITokenMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAUGE_FACTORY",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeperAddress_",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "approvalAmount_",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "booster",
      "outputs": [
        {
          "internalType": "contract IConvex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexRewards",
      "outputs": [
        {
          "internalType": "contract IRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveGauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePoolZap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAndStake",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curvePool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curvePoolZap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositAndStake",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "useDynamicArray",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "masterOracle",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct CurveBase.CurveInitParams",
          "name": "params_",
          "type": "tuple"
        },
        {
          "internalType": "contract IConvex",
          "name": "booster_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "convexPoolId_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHere",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHereAndStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHereAndStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAccountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeperAddress_",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut_",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken_",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleWithdrawOneCoinFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapper",
          "name": "swapper_",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawOneCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa94cda647d56adce85d266b0daa2d4811dc360bff8a4d46328e5ca6dd1a1d256",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0x58D608Cf3195f1db39f7B2735f8Aa1848194ca06",
    "transactionIndex": 4,
    "gasUsed": "5361272",
    "logsBloom": "0x
    "blockHash": "0x59c1c17ad5672e04406cdd4ef8100147f59ea017b9ba452b43542eb4c5b63b7a",
    "transactionHash": "0xa94cda647d56adce85d266b0daa2d4811dc360bff8a4d46328e5ca6dd1a1d256",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 22468175,
        "transactionHash": "0xa94cda647d56adce85d266b0daa2d4811dc360bff8a4d46328e5ca6dd1a1d256",
        "address": "0x58D608Cf3195f1db39f7B2735f8Aa1848194ca06",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 40,
        "blockHash": "0x59c1c17ad5672e04406cdd4ef8100147f59ea017b9ba452b43542eb4c5b63b7a"
      }
    ],
    "blockNumber": 22468175,
    "cumulativeGasUsed": "6384197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dad4c467d31ed2162e079eb3a5825e42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoosterDepositFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotSweepToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurveGaugeIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurveLpIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurvePoolZapIsNull\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollectorNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectLpToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToSendEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOneEthAllowedInUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardClaimFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeFromConvexFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldMasterOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"SlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"WithdrawOneCoinToggled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAUGE_FACTORY\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeperAddress_\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approvalAmount_\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexRewards\",\"outputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveGauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePoolZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAndStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePoolZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAndStake\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDynamicArray\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterOracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct CurveBase.CurveInitParams\",\"name\":\"params_\",\"type\":\"tuple\"},{\"internalType\":\"contract IConvex\",\"name\":\"booster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"convexPoolId_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHere\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHereAndStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHereAndStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeperAddress_\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut_\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken_\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWithdrawOneCoinFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"swapper_\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOneCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"keeperAddress_\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"OnlyKeeper: Approve all required tokens\"},\"claimRewards()\":{\"details\":\"This function will only be used when protocol doesn't offer claim by anyone.\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"keeperAddress_\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"fromToken_\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"feeCollector_\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"swapper_\":\"swapper address\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"params\":{\"amount_\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"onlyGovernor: Add given address in keepers list.\"},\"claimRewards()\":{\"notice\":\"OnlyKeeper: Claim rewards from protocol.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"onlyGovernor: Remove given address from keepers list.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"onlyKeeper: sweep given token to feeCollector of strategy\"},\"tvl()\":{\"notice\":\"Returns collateral balance + collateral deposited to curve\"},\"updateFeeCollector(address)\":{\"notice\":\"onlyGovernor: Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"onlyGovernor: Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"onlyPool: Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/convex/Convex.sol\":\"Convex\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x93db3a74569edb2f26a4787f74368039ae246b821b827b6850e8650c34b64991\",\"license\":\"MIT\"},\"contracts/interfaces/convex/IConvexForCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\ninterface IConvex {\\n    function poolInfo(uint256) external view returns (address, address, address, address, address, bool);\\n\\n    // deposit lp tokens and stake\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\\n\\n    // deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    // withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    // withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    // claim crv + extra rewards\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    // claim  rewards on stash (msg.sender == stash)\\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\\n\\n    // delegate address votes on dao (needs to be voteDelegate)\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns (bool);\\n\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\\n}\\n\\ninterface IRewards {\\n    function pid() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function stake(uint256) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward() external returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function donate(uint256 _amount) external returns (bool);\\n\\n    function queuedRewards() external view returns (uint256);\\n}\\n\\ninterface IStashTokenWrapper {\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4adc94cf1a91b63e9160ce02c66feb994f48eb1310af1846d14aef2d859ebe8f\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.25;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4f6825e4b47c376923887e3bf2003e949b4ebdf6c2b2c41eb2656d6e29d9b2e1\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.25;\\n\\ninterface IDepositAndStake {\\n    /**\\n     * @notice Deposit coins into Curve pool and stake LP tokens into a Curve gauge.\\n     * @param deposit Address of the deposit contract. It can be Curve pool or zap.\\n     * @param lpToken Address of the LP token.\\n     * @param gauge Address of the gauge.\\n     * @param nCoins Number of coins in the pool.\\n     * @param coins Array of coin addresses.\\n     * @param amounts Array of amounts to deposit for each coin.\\n     * @param minMintAmount Minimum amount of LP tokens to mint.\\n     * @param useUnderlying Boolean indicating whether to use underlying tokens.\\n     * @param useDynArray Boolean indicating whether to use dynamic arrays.\\n     * @param pool It can be null. If zap contract is used as 'deposit' then it will be address of the curve pool.\\n     */\\n    function deposit_and_stake(\\n        address deposit,\\n        address lpToken,\\n        address gauge,\\n        uint256 nCoins,\\n        address[] calldata coins,\\n        uint256[] calldata amounts,\\n        uint256 minMintAmount,\\n        bool useUnderlying,\\n        bool useDynArray,\\n        address pool\\n    ) external payable;\\n}\\n\\ninterface IWithdraw {\\n    // Remove liquidity one coin\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n\\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) external;\\n\\n    // Remove liquidity in all tokens\\n    // For plain Curve pools\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    // For LendingToken Curve pools where use_underlying flag exists\\n    function remove_liquidity(uint256 amount, uint256[2] calldata min_amounts, bool use_underlying) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[3] calldata min_amounts, bool use_underlying) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[4] calldata min_amounts, bool use_underlying) external;\\n\\n    // For Curve pools where Zap contract is used i.e. Meta pools\\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[4] memory _min_amounts) external;\\n\\n    // For Curve pools with dynamic array\\n    function remove_liquidity(uint256 _amount, uint256[] memory _min_amounts) external;\\n\\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[] memory _min_amounts) external;\\n}\\n\",\"keccak256\":\"0x5b0b42ba2523aafe63916478de72747e9b5c51ce6d67b16f20f4c70de9c7d267\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILiquidityGauge {\\n    function lp_token() external view returns (address);\\n\\n    function deposit(uint256 _value) external;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\\ninterface ILiquidityGaugeReward {\\n    function rewarded_token() external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV2 is IERC20, ILiquidityGauge {\\n    function claim_rewards() external;\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n\\n    function set_approve_deposit(address addr, bool can_deposit) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x6b8f728e2c829794775bbd30f2686b0796a5011d8a97b2d2ceea6bfe7978d4cd\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ILiquidityGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.25;\\n\\ninterface ILiquidityGaugeFactory {\\n    function get_gauge_from_lp_token(address lp_token) external view returns (address);\\n\\n    function is_valid_gauge(address _gauge) external view returns (bool);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0xde91c24b08a0175787e76fc14ddb2bb389278dce05d53351d4b9502828f2ba88\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.25;\\n\\ninterface IMetaRegistry {\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_n_underlying_coins(address pool) external view returns (uint256);\\n\\n    function get_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_balances(address pool) external view returns (uint256[8] memory);\\n\\n    function get_pool_from_lp_token(address token) external view returns (address);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_balances(address pool) external view returns (uint256[8] memory);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function is_registered(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb638b58d255bc82f43f37d4d2e493f5f3c3ae87bc30aa9495acf68fed37bad46\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface ITokenMinter {\\n    function mint(address gaugeAddr) external;\\n}\\n\",\"keccak256\":\"0xadf0d72d3fc1030aea76b8c3395500f621acf5c2c7b6528af66ad27e31d92412\",\"license\":\"MIT\"},\"contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(address tokenIn_, address tokenOut_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x961427db4bd5e914add0afb716878acd3f727d6283e3a34e862f79160605203f\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\n/**\\n * @notice Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface ISwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0xfbe547d9555f0aeaa5cfc163052ddd2ecf0f0c43a989ddea2c83e965e25f9e8e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function collateralToken() external view returns (IERC20);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function receiptToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7776b9d01e0f95e2331dffdcf00089737c83daf91772e2f441e9363167f3fe14\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVesperPool is IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function governor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcabccd7ba4999c2fe756ece18a5bf84e6a4758015f27b6116f61abf268804149\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IStrategy} from \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport {IVesperPool} from \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport {ISwapper} from \\\"../interfaces/swapper/ISwapper.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\nabstract contract Strategy is Initializable, UUPSUpgradeable, IStrategy {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error AddressIsNull();\\n    error CanNotSweepToken();\\n    error FeeCollectorNotSet();\\n    error InvalidStrategy();\\n    error NotEnoughAmountOut();\\n    error Unauthorized();\\n\\n    event UpdatedFeeCollector(address oldFeeCollector, address newFeeCollector);\\n    event UpdatedSwapper(ISwapper oldSwapper, ISwapper newSwapper);\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n    /// @custom:storage-location erc7201:vesper.storage.Strategy\\n    struct StrategyStorage {\\n        IERC20 _collateralToken;\\n        address _pool;\\n        address _receiptToken;\\n        address _feeCollector;\\n        ISwapper _swapper;\\n        EnumerableSet.AddressSet _keepers;\\n        string _name;\\n    }\\n\\n    bytes32 private constant StrategyStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"vesper.storage.Strategy\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    function _getStrategyStorage() private pure returns (StrategyStorage storage $) {\\n        bytes32 _location = StrategyStorageLocation;\\n        assembly {\\n            $.slot := _location\\n        }\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function __Strategy_init(\\n        address pool_,\\n        address swapper_,\\n        address receiptToken_,\\n        string memory name_\\n    ) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        if (pool_ == address(0) || swapper_ == address(0) || receiptToken_ == address(0)) revert AddressIsNull();\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        $._pool = pool_;\\n        $._collateralToken = IVesperPool(pool_).token();\\n        $._receiptToken = receiptToken_;\\n        // Set pool governor as default feeCollector\\n        $._feeCollector = IVesperPool(pool_).governor();\\n        $._swapper = ISwapper(swapper_);\\n        $._name = name_;\\n        $._keepers.add(msg.sender);\\n    }\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        if (!_getStrategyStorage()._keepers.contains(msg.sender)) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        if (msg.sender != pool()) revert Unauthorized();\\n        _;\\n    }\\n\\n    function collateralToken() public view override returns (IERC20) {\\n        return _getStrategyStorage()._collateralToken;\\n    }\\n\\n    function feeCollector() public view returns (address) {\\n        return _getStrategyStorage()._feeCollector;\\n    }\\n\\n    function governor() public view returns (address) {\\n        return IVesperPool(pool()).governor();\\n    }\\n\\n    function isActive() external view override returns (bool) {\\n        (bool _isActive, , , , , , , , ) = IVesperPool(pool()).strategy(address(this));\\n        return _isActive;\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _getStrategyStorage()._keepers.values();\\n    }\\n\\n    function NAME() external view returns (string memory) {\\n        return _getStrategyStorage()._name;\\n    }\\n\\n    function pool() public view override returns (address) {\\n        return _getStrategyStorage()._pool;\\n    }\\n\\n    function poolAccountant() external view returns (address) {\\n        return IVesperPool(pool()).poolAccountant();\\n    }\\n\\n    function swapper() public view returns (ISwapper) {\\n        return _getStrategyStorage()._swapper;\\n    }\\n\\n    function receiptToken() public view virtual override returns (address) {\\n        return _getStrategyStorage()._receiptToken;\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    function VERSION() external pure virtual override returns (string memory) {\\n        return \\\"5.5.0\\\";\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Add given address in keepers list.\\n     * @param keeperAddress_ keeper address to add.\\n     */\\n    function addKeeper(address keeperAddress_) external onlyGovernor {\\n        _getStrategyStorage()._keepers.add(keeperAddress_);\\n    }\\n\\n    /// @dev OnlyKeeper: Approve all required tokens\\n    function approveToken(uint256 approvalAmount_) external onlyKeeper {\\n        _approveToken(approvalAmount_);\\n    }\\n\\n    /// @notice OnlyKeeper: Claim rewards from protocol.\\n    /// @dev This function will only be used when protocol doesn't offer claim by anyone.\\n    function claimRewards() external onlyKeeper {\\n        _claimRewards();\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Remove given address from keepers list.\\n     * @param keeperAddress_ keeper address to remove.\\n     */\\n    function removeKeeper(address keeperAddress_) external onlyGovernor {\\n        _getStrategyStorage()._keepers.remove(keeperAddress_);\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 tokenIn_, uint256 minAmountOut_) external onlyKeeper returns (uint256 _amountOut) {\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        IERC20 _collateralToken = $._collateralToken;\\n        address _swapper = address($._swapper);\\n\\n        if (address(tokenIn_) == address(_collateralToken) || isReservedToken(address(tokenIn_)))\\n            revert CanNotSweepToken();\\n        uint256 _collateralBefore = _collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = tokenIn_.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > tokenIn_.allowance(address(this), _swapper)) {\\n                // if needed, forceApprove will set approval to zero before setting new value.\\n                tokenIn_.forceApprove(_swapper, MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(tokenIn_), address(_collateralToken), _amountIn);\\n        }\\n        _amountOut = _collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        if (_amountOut < minAmountOut_) revert NotEnoughAmountOut();\\n    }\\n\\n    /**\\n     * @notice onlyKeeper: sweep given token to feeCollector of strategy\\n     * @param fromToken_ token address to sweep\\n     */\\n    function sweep(address fromToken_) external override onlyKeeper {\\n        address _feeCollector = feeCollector();\\n        if (_feeCollector == address(0)) revert FeeCollectorNotSet();\\n        if (fromToken_ == address(collateralToken()) || isReservedToken(fromToken_)) revert CanNotSweepToken();\\n        if (fromToken_ == ETH) {\\n            Address.sendValue(payable(_feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(fromToken_).balanceOf(address(this));\\n            IERC20(fromToken_).safeTransfer(_feeCollector, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Update fee collector\\n     * @param feeCollector_ fee collector address\\n     */\\n    function updateFeeCollector(address feeCollector_) external onlyGovernor {\\n        if (feeCollector_ == address(0)) revert AddressIsNull();\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        emit UpdatedFeeCollector($._feeCollector, feeCollector_);\\n        $._feeCollector = feeCollector_;\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Update swapper\\n     * @param swapper_ swapper address\\n     */\\n    function updateSwapper(ISwapper swapper_) external onlyGovernor {\\n        if (address(swapper_) == address(0)) revert AddressIsNull();\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        emit UpdatedSwapper($._swapper, swapper_);\\n        $._swapper = swapper_;\\n    }\\n\\n    /**\\n     * @notice onlyPool: Withdraw collateral token from end protocol.\\n     * @param amount_ Amount of collateral token\\n     */\\n    function withdraw(uint256 amount_) external override onlyPool {\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        IERC20 _collateralToken = $._collateralToken;\\n        address _pool = $._pool;\\n        uint256 _collateralHere = _collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= amount_) {\\n            _collateralToken.safeTransfer(_pool, amount_);\\n        } else {\\n            _withdrawHere(amount_ - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = _collateralToken.balanceOf(address(this));\\n            _collateralToken.safeTransfer(_pool, Math.min(amount_, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual {\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        $._collateralToken.forceApprove($._pool, amount_);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyGovernor {}\\n\\n    function _claimRewards() internal virtual {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper().swapExactInput(tokenIn_, tokenOut_, amountIn_, 1, address(this));\\n    }\\n\\n    function _trySwapExactInput(address tokenIn_, address tokenOut_, uint256 amountIn_) internal returns (uint256) {\\n        try swapper().swapExactInput(tokenIn_, tokenOut_, amountIn_, 1, address(this)) returns (uint256 _amountOut) {\\n            return _amountOut;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 amount_) internal virtual;\\n}\\n\",\"keccak256\":\"0x99fba93ad82031b384caabef2dceaa7ac9fd17cb52e905fb8ffd23eeab972c09\",\"license\":\"MIT\"},\"contracts/strategies/convex/Convex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ILiquidityGaugeV2} from \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport {IConvex, IRewards} from \\\"../../interfaces/convex/IConvexForCurve.sol\\\";\\nimport {CurveBase} from \\\"../curve/CurveBase.sol\\\";\\n\\n// Convex Strategy\\ncontract Convex is CurveBase {\\n    using SafeERC20 for IERC20;\\n\\n    error BoosterDepositFailed();\\n    error IncorrectLpToken();\\n    error RewardClaimFailed();\\n    error UnstakeFromConvexFailed();\\n\\n    /// @custom:storage-location erc7201:vesper.storage.Strategy.Convex\\n    struct ConvexStorage {\\n        address _convexToken;\\n        IConvex _booster;\\n        IRewards _convexRewards;\\n        uint256 _convexPoolId;\\n    }\\n\\n    bytes32 private constant ConvexStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"vesper.storage.Strategy.Convex\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    function _getConvexStorage() internal pure returns (ConvexStorage storage $) {\\n        bytes32 _location = ConvexStorageLocation;\\n        assembly {\\n            $.slot := _location\\n        }\\n    }\\n\\n    function initialize(\\n        CurveBase.CurveInitParams memory params_,\\n        IConvex booster_,\\n        uint256 convexPoolId_\\n    ) external initializer {\\n        __CurveBase_init(params_);\\n\\n        if (address(booster_) == address(0)) revert AddressIsNull();\\n\\n        (address _lp, , , address _rewards, , ) = booster_.poolInfo(convexPoolId_);\\n        if (_lp != address(receiptToken())) revert IncorrectLpToken();\\n\\n        ConvexStorage storage $ = _getConvexStorage();\\n        $._booster = booster_;\\n        $._convexRewards = IRewards(_rewards);\\n        $._convexPoolId = convexPoolId_;\\n    }\\n\\n    function booster() public view returns (IConvex) {\\n        return _getConvexStorage()._booster;\\n    }\\n\\n    function convexPoolId() public view returns (uint256) {\\n        return _getConvexStorage()._convexPoolId;\\n    }\\n\\n    function convexRewards() public view returns (IRewards) {\\n        return _getConvexStorage()._convexRewards;\\n    }\\n\\n    function convexToken() public view returns (address) {\\n        return _getConvexStorage()._convexToken;\\n    }\\n\\n    function lpBalanceStaked() public view override returns (uint256 _total) {\\n        _total = convexRewards().balanceOf(address(this));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal override {\\n        super._approveToken(amount_);\\n        curveLp().forceApprove(address(booster()), amount_);\\n    }\\n\\n    function _deposit() internal override {\\n        // 1. deposit collateral in Curve and stake LP in Curve Gauge.\\n        super._deposit();\\n\\n        // 2. Unstake LP from Curve Gauge\\n        _unstakeLpFromCurve();\\n\\n        // 3. Stake LP in Convex Booster\\n        uint256 _balance = curveLp().balanceOf(address(this));\\n        if (_balance > 0) {\\n            if (!booster().deposit(convexPoolId(), _balance, true)) revert BoosterDepositFailed();\\n        }\\n    }\\n\\n    function _unstakeLpFromCurve() internal {\\n        ILiquidityGaugeV2 _curveGauge = curveGauge();\\n        uint256 _lpStakedInCurve = _curveGauge.balanceOf(address(this));\\n        if (_lpStakedInCurve > 0) {\\n            _curveGauge.withdraw(_lpStakedInCurve);\\n        }\\n    }\\n\\n    /// @dev Don't claiming rewards because `_claimRewards()` already does that\\n    function _unstakeLp(uint256 _amount) internal override {\\n        if (_amount > 0) {\\n            if (!convexRewards().withdrawAndUnwrap(_amount, false)) revert UnstakeFromConvexFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9426b26e86b8a57175b9012c86423f04057e884f39f9c09468c23d794e8371be\",\"license\":\"MIT\"},\"contracts/strategies/curve/CurveBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Strategy} from \\\"../Strategy.sol\\\";\\nimport {IVesperPool} from \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\nimport {IMasterOracle} from \\\"../../interfaces/one-oracle/IMasterOracle.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/curve/IAddressProvider.sol\\\";\\nimport {IDepositAndStake, IWithdraw} from \\\"../../interfaces/curve/ICurve.sol\\\";\\nimport {ILiquidityGaugeV2} from \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport {ILiquidityGaugeFactory} from \\\"../../interfaces/curve/ILiquidityGaugeFactory.sol\\\";\\nimport {IMetaRegistry} from \\\"../../interfaces/curve/IMetaRegistry.sol\\\";\\nimport {ITokenMinter} from \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\n\\n/// @title Base contract for Curve-related strategies\\nabstract contract CurveBase is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    error CurveGaugeIsNull();\\n    error CurveLpIsNull();\\n    error CurvePoolZapIsNull();\\n    error InvalidCollateral();\\n    error InvalidSlippage();\\n    error NotAllowedToSendEther();\\n    error OnlyOneEthAllowedInUnderlying();\\n    error SlippageTooHigh();\\n\\n    event SlippageUpdated(uint256 oldSlippage, uint256 newSlippage);\\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\\n    event WithdrawOneCoinToggled(bool newValue);\\n\\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\\n    ILiquidityGaugeFactory public constant GAUGE_FACTORY =\\n        ILiquidityGaugeFactory(0xabC000d88f23Bb45525E447528DBF656A9D55bf5); // Act as CRV_MINTER on side chains\\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x5ffe7FB82894076ECB99A30D6A32e969e6e35E98); // Same address to all chains\\n    uint256 private constant META_REGISTRY_ADDRESS_ID = 7;\\n    uint256 private constant MAX_BPS = 10_000;\\n\\n    // Initialize params. Using this struct to mitigate stack too deep error.\\n    // It is being used during initialize only.\\n    struct CurveInitParams {\\n        address pool;\\n        address swapper;\\n        address curvePool;\\n        address curvePoolZap;\\n        address depositAndStake;\\n        bool useDynamicArray;\\n        uint256 slippage;\\n        address weth;\\n        address masterOracle;\\n        string name;\\n    }\\n\\n    /// @custom:storage-location erc7201:vesper.storage.Strategy.CurveBase\\n    struct CurveBaseStorage {\\n        address _curvePool;\\n        IERC20 _curveLp;\\n        ILiquidityGaugeV2 _curveGauge;\\n        address _curvePoolZap;\\n        address _depositAndStake;\\n        IWETH _weth;\\n        IMasterOracle _masterOracle;\\n        address _depositContract;\\n        address _curvePoolForDeposit;\\n        uint256 _slippage;\\n        uint256 _collateralIdx;\\n        address[] _underlyingTokens;\\n        bool _isMetaPool;\\n        bool _useDynamicArray;\\n        bool _useUnderlying;\\n        bool _withdrawOneCoin;\\n    }\\n\\n    bytes32 private constant CurveBaseStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"vesper.storage.Strategy.CurveBase\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    function _getCurveBaseStorage() internal pure returns (CurveBaseStorage storage $) {\\n        bytes32 _location = CurveBaseStorageLocation;\\n        assembly {\\n            $.slot := _location\\n        }\\n    }\\n\\n    function __CurveBase_init(CurveInitParams memory params_) internal initializer {\\n        // init require non-zero value for receiptToken hence setting it to 0x1.\\n        // receiptToken is overridden in this contract to return curveLp address as receiptToken\\n        __Strategy_init(params_.pool, params_.swapper, address(0x1), params_.name);\\n\\n        if (\\n            params_.curvePool == address(0) ||\\n            params_.depositAndStake == address(0) ||\\n            params_.weth == address(0) ||\\n            params_.masterOracle == address(0)\\n        ) revert AddressIsNull();\\n\\n        IMetaRegistry _registry = IMetaRegistry(ADDRESS_PROVIDER.get_address(META_REGISTRY_ADDRESS_ID));\\n\\n        address _curveLp = _registry.get_lp_token(params_.curvePool);\\n        if (_curveLp == address(0)) revert CurveLpIsNull();\\n\\n        address _curveGauge = _registry.get_gauge(params_.curvePool);\\n        if (_curveGauge == address(0)) revert CurveGaugeIsNull();\\n\\n        CurveBaseStorage storage $ = _getCurveBaseStorage();\\n        bool _isLendingTokenPool;\\n        ($._underlyingTokens, $._collateralIdx, $._isMetaPool, _isLendingTokenPool) = _getCurvePoolInfo(\\n            _registry,\\n            params_.curvePool,\\n            params_.weth\\n        );\\n        $._curvePool = params_.curvePool;\\n        $._curveLp = IERC20(_curveLp);\\n        $._curveGauge = ILiquidityGaugeV2(_curveGauge);\\n        $._curvePoolZap = params_.curvePoolZap;\\n        $._depositAndStake = params_.depositAndStake;\\n        $._weth = IWETH(params_.weth);\\n        $._masterOracle = IMasterOracle(params_.masterOracle);\\n        $._slippage = params_.slippage;\\n        $._useDynamicArray = params_.useDynamicArray;\\n\\n        if ($._isMetaPool) {\\n            if (params_.curvePoolZap == address(0)) revert CurvePoolZapIsNull();\\n            $._depositContract = params_.curvePoolZap;\\n            $._curvePoolForDeposit = params_.curvePool;\\n        } else {\\n            $._depositContract = params_.curvePool;\\n        }\\n\\n        if (_isLendingTokenPool && params_.curvePoolZap != address(0)) {\\n            $._depositContract = params_.curvePoolZap;\\n            // useUnderlying is false in this case and false is default to no need to set.\\n        } else {\\n            // otherwise set useUnderlying\\n            $._useUnderlying = _isLendingTokenPool;\\n        }\\n    }\\n\\n    receive() external payable {\\n        CurveBaseStorage memory s = _getCurveBaseStorage();\\n        address _curvePool = s._curvePool;\\n        IWETH _weth = s._weth;\\n        if (msg.sender != _curvePool && msg.sender != address(_weth)) revert NotAllowedToSendEther();\\n        if (msg.sender == _curvePool) {\\n            _weth.deposit{value: address(this).balance}();\\n        }\\n    }\\n\\n    function curvePool() public view returns (address) {\\n        return _getCurveBaseStorage()._curvePool;\\n    }\\n\\n    function curveLp() public view returns (IERC20) {\\n        return _getCurveBaseStorage()._curveLp;\\n    }\\n\\n    function curveGauge() public view returns (ILiquidityGaugeV2) {\\n        return _getCurveBaseStorage()._curveGauge;\\n    }\\n\\n    function curvePoolZap() public view returns (address) {\\n        return _getCurveBaseStorage()._curvePoolZap;\\n    }\\n\\n    function depositAndStake() public view returns (address) {\\n        return _getCurveBaseStorage()._depositAndStake;\\n    }\\n\\n    function getUnderlyingTokens() public view returns (address[] memory) {\\n        return _getCurveBaseStorage()._underlyingTokens;\\n    }\\n\\n    function isMetaPool() internal view returns (bool) {\\n        return _getCurveBaseStorage()._isMetaPool;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == address(curveLp()) || token_ == address(collateralToken());\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function lpBalanceHere() public view returns (uint256 _lpHere) {\\n        _lpHere = curveLp().balanceOf(address(this));\\n    }\\n\\n    function lpBalanceHereAndStaked() public view returns (uint256 _lpHereAndStaked) {\\n        _lpHereAndStaked = curveLp().balanceOf(address(this)) + lpBalanceStaked();\\n    }\\n\\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\\n        _lpStaked = curveGauge().balanceOf(address(this));\\n    }\\n\\n    function masterOracle() public view returns (IMasterOracle) {\\n        return _getCurveBaseStorage()._masterOracle;\\n    }\\n\\n    function withdrawOneCoin() public view returns (bool) {\\n        return _getCurveBaseStorage()._withdrawOneCoin;\\n    }\\n\\n    function receiptToken() public view override returns (address) {\\n        return address(curveLp());\\n    }\\n\\n    function slippage() public view returns (uint256) {\\n        return _getCurveBaseStorage()._slippage;\\n    }\\n\\n    /// @notice Returns collateral balance + collateral deposited to curve\\n    function tvl() external view override returns (uint256) {\\n        return collateralToken().balanceOf(address(this)) + _quoteLpToCoin(lpBalanceHereAndStaked());\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n\\n        CurveBaseStorage memory s = _getCurveBaseStorage();\\n        if (s._curvePoolZap != address(0)) {\\n            // It is needed for withdrawal\\n            s._curveLp.forceApprove(s._curvePoolZap, amount_);\\n        }\\n\\n        address _swapper = address(swapper());\\n        address[] memory _underlyingTokens = s._underlyingTokens;\\n        uint256 _nCoins = _underlyingTokens.length;\\n        for (uint256 i; i < _nCoins; i++) {\\n            address _underlyingToken = _underlyingTokens[i];\\n            IERC20(_underlyingToken).forceApprove(_swapper, amount_);\\n            IERC20(_underlyingToken).forceApprove(s._depositAndStake, amount_);\\n        }\\n\\n        // Gauge needs to be approved for stake via depositAndStake contract. Some Gauge doesn't support this method\\n        try ILiquidityGaugeV2(s._curveGauge).set_approve_deposit(s._depositAndStake, true) {} catch {}\\n    }\\n\\n    function _claimRewards() internal override {\\n        ILiquidityGaugeV2 _curveGauge = curveGauge();\\n        if (block.chainid == 1) {\\n            CRV_MINTER.mint(address(_curveGauge));\\n        } else if (GAUGE_FACTORY.is_valid_gauge(address(_curveGauge))) {\\n            // On side chain gauge factory can mint CRV reward but only for valid gauge.\\n            GAUGE_FACTORY.mint(address(_curveGauge));\\n        }\\n        // solhint-disable-next-line no-empty-blocks\\n        try _curveGauge.claim_rewards() {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. 3Crv gauge doesn't have such function\\n        }\\n    }\\n\\n    // @dev Convex strategy will have to override this to unstake from gauge and stake in Booster\\n    function _deposit() internal virtual {\\n        _depositAndStakeToCurve();\\n    }\\n\\n    function _depositAndStakeToCurve() internal {\\n        CurveBaseStorage memory s = _getCurveBaseStorage();\\n        uint256[] memory _depositAmounts;\\n        uint256 _minMintAmount;\\n        uint256 _ethValue;\\n        {\\n            bool _isAmountZero;\\n            (_depositAmounts, _minMintAmount, _ethValue, _isAmountZero) = _getDepositData(s);\\n            if (_isAmountZero) return;\\n        }\\n\\n        IDepositAndStake(s._depositAndStake).deposit_and_stake{value: _ethValue}(\\n            s._depositContract,\\n            address(s._curveLp),\\n            address(s._curveGauge),\\n            s._underlyingTokens.length,\\n            s._underlyingTokens,\\n            _depositAmounts,\\n            _minMintAmount,\\n            s._useUnderlying,\\n            s._useDynamicArray,\\n            s._curvePoolForDeposit\\n        );\\n    }\\n\\n    function _getCurvePoolInfo(\\n        IMetaRegistry registry_,\\n        address curvePool_,\\n        address _weth\\n    )\\n        internal\\n        view\\n        returns (address[] memory _underlyingTokens, uint256 _collateralIdx, bool _isMetaPool, bool _isLendingTokenPool)\\n    {\\n        /// Note: collateralToken() is defined in parent contract and must be initialized before reading it.\\n        address _collateralToken = address(collateralToken());\\n        // This is the actual number of underlying tokens in Curve pool\\n        uint256 _nCoins = registry_.get_n_underlying_coins(curvePool_);\\n        // We will track underlyingTokens array. It has length equal to _nCoins.\\n        _underlyingTokens = new address[](_nCoins);\\n        // get_underlying_coins always returns array of 8 length\\n        address[8] memory _underlyingCoins = registry_.get_underlying_coins(curvePool_);\\n        _collateralIdx = type(uint256).max;\\n        for (uint256 i; i < _nCoins; i++) {\\n            _underlyingTokens[i] = _underlyingCoins[i];\\n            if (_underlyingCoins[i] == _collateralToken || (_underlyingCoins[i] == ETH && _collateralToken == _weth)) {\\n                _collateralIdx = i;\\n            }\\n        }\\n        if (_collateralIdx > _nCoins) revert InvalidCollateral();\\n\\n        _isMetaPool = registry_.is_meta(curvePool_);\\n        // we know that collateral is in _underlyingCoins but if it is not in get_coins then it is lendingTokenPool\\n        // A lendingToken pool is the one which hold lending(aToken, cToken) token as Curve collateral token.\\n        if (!_isMetaPool && _underlyingCoins[_collateralIdx] != registry_.get_coins(curvePool_)[_collateralIdx]) {\\n            _isLendingTokenPool = true;\\n        }\\n    }\\n\\n    function _getDepositData(CurveBaseStorage memory s) private returns (uint256[] memory, uint256, uint256, bool) {\\n        uint256[] memory _depositAmounts = new uint256[](8);\\n        uint256 _minMintAmount;\\n        uint256 _ethValue;\\n        bool _isAmountZero = true; // Assume deposit amount is zero\\n\\n        // Iterate through all underlying tokens.\\n        // Check balance of underlyingToken to determine depositAmount\\n        // Get quote of underlying token to collateral to calculate minimum out\\n        uint256 _nCoins = s._underlyingTokens.length;\\n        for (uint256 i; i < _nCoins; i++) {\\n            address _underlyingToken = s._underlyingTokens[i];\\n            // ETH can be found at max once in underlyingTokens.\\n            if (_underlyingToken == ETH) {\\n                if (_ethValue != 0) revert OnlyOneEthAllowedInUnderlying();\\n                IWETH _weth = s._weth;\\n                _depositAmounts[i] = _weth.balanceOf(address(this));\\n                _weth.withdraw(_depositAmounts[i]);\\n                _ethValue = _depositAmounts[i];\\n                _minMintAmount += _getAmountOutMin(address(_weth), address(s._curveLp), _depositAmounts[i]);\\n            } else {\\n                _depositAmounts[i] = IERC20(_underlyingToken).balanceOf(address(this));\\n                _minMintAmount += _getAmountOutMin(_underlyingToken, address(s._curveLp), _depositAmounts[i]);\\n            }\\n            // If deposit amount for any underlyingToken is non zero then set the zero flag to false\\n            if (_depositAmounts[i] > 0) _isAmountZero = false;\\n        }\\n        return (_depositAmounts, _minMintAmount, _ethValue, _isAmountZero);\\n    }\\n\\n    function _getAmountOutMin(address tokenIn_, address tokenOut_, uint256 amountIn_) private view returns (uint256) {\\n        if (tokenIn_ == tokenOut_) {\\n            return amountIn_;\\n        } else {\\n            return (masterOracle().quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - slippage())) / MAX_BPS;\\n        }\\n    }\\n\\n    function _quoteLpToCoin(uint256 amountIn_) private view returns (uint256 _amountOut) {\\n        if (amountIn_ == 0) {\\n            return 0;\\n        }\\n\\n        IMetaRegistry _metaRegistry = IMetaRegistry(ADDRESS_PROVIDER.get_address(META_REGISTRY_ADDRESS_ID));\\n        address _collateralToken = address(collateralToken());\\n\\n        address _curvePool = curvePool();\\n        // Notice we are reading number of pool coins and not underlying. In case Meta pools it will be 2.\\n        uint256 _nCoins = _metaRegistry.get_n_coins(_curvePool);\\n        address[8] memory _coins = _metaRegistry.get_coins(_curvePool);\\n        // Get balance of pool tokens,\\n        // in case of Meta pools\\n        //  - index 0 will be token in pool\\n        //  - index 1 will be lp token of base pool\\n        uint256[8] memory _coinBalances = _metaRegistry.get_balances(_curvePool);\\n        // CurveLp totalSupply\\n        uint256 _totalSupply = curveLp().totalSupply();\\n        // amountIn_ is basically amount of LP.\\n        uint256 _lpIn = amountIn_;\\n\\n        if (isMetaPool()) {\\n            // If we have a Meta pool then\\n            //  - There will be 2 tokens in the pool. Index 0 is a Meta token, index 1 is lp of base pool.\\n            // We can use coinBalances[0] to calculate amountOut as we know token at index 0 is of the token of pool.\\n            uint256 _coinOut = (_lpIn * _coinBalances[0]) / _totalSupply;\\n            _amountOut += _getAmountOutMin(_coins[0], _collateralToken, _coinOut);\\n\\n            // Now use coinBalances[1] to calculate amountOut.\\n            // For MetaPool This is the amount of LP of base pool.It becomes amountIn_ aka _lpIn for further calculation.\\n            // calculate new lpIn using coinBalance and totalSupply of Meta pool\\n            _lpIn = (_lpIn * _coinBalances[1]) / _totalSupply;\\n\\n            // Given Meta pool, coin at index 1 is the LP of base Curve pool\\n            address _baseLp = _coins[1];\\n            // Use base lp to get address of base curve pool\\n            address _basePool = _metaRegistry.get_pool_from_lp_token(_baseLp);\\n\\n            // For MetaPool, we will have to update TotalSupply as the totalSupply of base LP and not the Meta LP.\\n            // Same is true for nCoins, coins and coinBalances. We will update all of these will values corresponds to base pool.\\n            // update totalSupply and coinBalance from base pool\\n            _totalSupply = IERC20(_baseLp).totalSupply();\\n            _nCoins = _metaRegistry.get_n_coins(_basePool);\\n            _coins = _metaRegistry.get_coins(_basePool);\\n            _coinBalances = _metaRegistry.get_balances(_basePool);\\n\\n            // Outside this if block, logic will process coins of base pool.\\n        }\\n\\n        // iterate over number of tokens\\n        for (uint256 i; i < _nCoins; i++) {\\n            // use lpIn, coinBalances and totalSupply to calculate coinOut\\n            uint256 _coinOut = (_lpIn * _coinBalances[i]) / _totalSupply;\\n            // get quote of coin to collateral\\n            _amountOut += _getAmountOutMin(_coins[i], _collateralToken, _coinOut);\\n        }\\n    }\\n\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        IVesperPool _pool = IVesperPool(pool());\\n        uint256 _excessDebt = _pool.excessDebt(address(this));\\n        uint256 _totalDebt = _pool.totalDebtOf(address(this));\\n\\n        IERC20 _collateralToken = collateralToken();\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp);\\n        uint256 _collateralHere = _collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            uint256 _totalAmountToWithdraw = _profitAndExcessDebt - _collateralHere;\\n            uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\\n            if (_lpToBurn > 0) {\\n                _withdrawHere(_lpHere, _lpToBurn);\\n                _collateralHere = _collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        _pool.reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    function _unstakeLp(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            curveGauge().withdraw(amount_);\\n        }\\n    }\\n\\n    /// @dev It is okay to set 0 as _amountOut as there is another check in place in calling function.\\n    function _withdrawFromCurve(uint256 nCoins_, uint256 lpToBurn_) internal virtual {\\n        CurveBaseStorage memory s = _getCurveBaseStorage();\\n        address _curvePool = s._curvePool;\\n        address _curvePoolZap = s._curvePoolZap;\\n        if (s._withdrawOneCoin) {\\n            _withdrawOneCoin(s, lpToBurn_);\\n            return;\\n        }\\n        if (s._useDynamicArray) {\\n            uint256[] memory _amountOut = new uint256[](nCoins_);\\n            IWithdraw(_curvePool).remove_liquidity(lpToBurn_, _amountOut);\\n        } else if (nCoins_ == 2) {\\n            uint256[2] memory _amountOut;\\n            if (_curvePoolZap != address(0)) {\\n                IWithdraw(_curvePoolZap).remove_liquidity(lpToBurn_, _amountOut);\\n            } else {\\n                IWithdraw(_curvePool).remove_liquidity(lpToBurn_, _amountOut);\\n            }\\n        } else if (nCoins_ == 3) {\\n            uint256[3] memory _amountOut;\\n            if (_curvePoolZap != address(0)) {\\n                IWithdraw(_curvePoolZap).remove_liquidity(_curvePool, lpToBurn_, _amountOut);\\n            } else {\\n                IWithdraw(_curvePool).remove_liquidity(lpToBurn_, _amountOut);\\n            }\\n        } else if (nCoins_ == 4) {\\n            uint256[4] memory _amountOut;\\n            if (_curvePoolZap != address(0)) {\\n                IWithdraw(_curvePoolZap).remove_liquidity(_curvePool, lpToBurn_, _amountOut);\\n            } else {\\n                IWithdraw(_curvePool).remove_liquidity(lpToBurn_, _amountOut);\\n            }\\n        }\\n    }\\n\\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp), _totalLp);\\n        if (_lpToBurn == 0) return;\\n\\n        _withdrawHere(_lpHere, _lpToBurn);\\n    }\\n\\n    function _withdrawHere(uint256 lpHere_, uint256 lpToBurn_) internal {\\n        if (lpToBurn_ > lpHere_) {\\n            _unstakeLp(lpToBurn_ - lpHere_);\\n        }\\n\\n        address _collateralToken = address(collateralToken());\\n        uint256 _collateralBefore = IERC20(_collateralToken).balanceOf(address(this));\\n        // We can check amountOut_ against collateral received but it will serve as extra security measure\\n        uint256 _minAmountOut = _getAmountOutMin(address(curveLp()), _collateralToken, lpToBurn_);\\n\\n        address[] memory _underlyingTokens = getUnderlyingTokens();\\n        uint256 _nCoins = _underlyingTokens.length;\\n        _withdrawFromCurve(_nCoins, lpToBurn_);\\n\\n        for (uint256 i; i < _nCoins; i++) {\\n            address _underlyingToken = _underlyingTokens[i];\\n            if (_underlyingToken == _collateralToken) {\\n                continue;\\n            }\\n            uint256 _underlyingBalance = IERC20(_underlyingToken).balanceOf(address(this));\\n            if (_underlyingBalance > 0) {\\n                _swapExactInput(_underlyingToken, _collateralToken, _underlyingBalance);\\n            }\\n        }\\n        if (IERC20(_collateralToken).balanceOf(address(this)) - _collateralBefore < _minAmountOut)\\n            revert SlippageTooHigh();\\n    }\\n\\n    function _withdrawOneCoin(CurveBaseStorage memory s, uint256 lpToBurn_) internal {\\n        // Withdraw is protected by collateral balance check at the end, so it if fine to use 1 as min out.\\n        uint256 _minOut = 1;\\n        int128 _i = int128(int256(s._collateralIdx));\\n        if (s._curvePoolZap != address(0)) {\\n            IWithdraw(s._curvePoolZap).remove_liquidity_one_coin(s._curvePool, lpToBurn_, _i, _minOut);\\n        } else if (s._useUnderlying) {\\n            IWithdraw(s._curvePool).remove_liquidity_one_coin(lpToBurn_, _i, _minOut, true);\\n        } else {\\n            IWithdraw(s._curvePool).remove_liquidity_one_coin(lpToBurn_, _i, _minOut);\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    function toggleWithdrawOneCoinFlag() external onlyKeeper {\\n        CurveBaseStorage storage $ = _getCurveBaseStorage();\\n        bool _newValue = !$._withdrawOneCoin;\\n        emit WithdrawOneCoinToggled(_newValue);\\n        $._withdrawOneCoin = _newValue;\\n    }\\n\\n    function updateSlippage(uint256 newSlippage_) external onlyGovernor {\\n        if (newSlippage_ >= MAX_BPS) revert InvalidSlippage();\\n\\n        CurveBaseStorage storage $ = _getCurveBaseStorage();\\n        emit SlippageUpdated($._slippage, newSlippage_);\\n        $._slippage = newSlippage_;\\n    }\\n\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        if (address(newMasterOracle_) == address(0)) revert AddressIsNull();\\n\\n        CurveBaseStorage storage $ = _getCurveBaseStorage();\\n        emit MasterOracleUpdated($._masterOracle, newMasterOracle_);\\n        $._masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0x6bd216f0b020210630818d7489b28dce85c14b26ea303ba7267c6fd38fcca164\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051615fd96100fd600039600081816122290152818161225201526123d70152615fd96000f3fe6080604052600436106103225760003560e01c80637d7c2a1c116101a5578063c965fa8a116100ec578063e5328e0611610095578063ec78e8321161006f578063ec78e83214610a3d578063edb13ecb14610a52578063ee330ee314610a67578063ffa1ad7414610a8757600080fd5b8063e5328e06146109fe578063e89133b214610a13578063eaada38214610a2857600080fd5b8063d95bd6c9116100c6578063d95bd6c9146109bf578063de603fdc146109d4578063e529ee95146109e957600080fd5b8063c965fa8a1461096a578063d2c35ce81461097f578063d3033c391461099f57600080fd5b8063b2016bd41161014e578063c166f3cb11610128578063c166f3cb14610920578063c415b95c14610940578063c6def0761461095557600080fd5b8063b2016bd4146108e1578063be933ae6146108f6578063c12d636b1461090b57600080fd5b8063a3f4df7e1161017f578063a3f4df7e14610856578063abc9b45e14610878578063ad3cb1cc1461089857600080fd5b80637d7c2a1c146107ef578063951dc22c1461081f5780639fd395401461084157600080fd5b8063372500ab116102695780634f1ef2861161021257806374db9ad4116101ec57806374db9ad41461079d57806379054cc9146107c5578063795dae66146107da57600080fd5b80634f1ef2861461076057806352d1902d1461077357806366519bd61461078857600080fd5b80634032b72b116102435780634032b72b146106f8578063440d7248146107185780634a2b9e071461073857600080fd5b8063372500ab146106a05780633ac9fc11146106b55780633e032a3b146106d557600080fd5b80631ef1314f116102cb578063280718e2116102a5578063280718e2146106565780632b3297f91461066b5780632e1a7d4d1461068057600080fd5b80631ef1314f14610607578063218751b21461061c57806322f3e2d41461063157600080fd5b806315b0d496116102fc57806315b0d496146105aa57806316f0115b146105ca5780631848effa146105df57600080fd5b806301681a62146105385780630c340a241461055857806314ae9f2e1461058a57600080fd5b36610533576000610331610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b84018054845181840281018401909552808552929493610160860193909283018282801561041f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610401575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152805160a082015191925090336001600160a01b038316148015906104955750336001600160a01b03821614155b156104cc576040517fe765476500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216330361053157806001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561051757600080fd5b505af115801561052b573d6000803e3d6000fd5b50505050505b005b600080fd5b34801561054457600080fd5b50610531610553366004615639565b610b2f565b34801561056457600080fd5b5061056d610cb9565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561059657600080fd5b506105316105a5366004615639565b610d29565b3480156105b657600080fd5b506105316105c5366004615656565b610d76565b3480156105d657600080fd5b5061056d610e3a565b3480156105eb57600080fd5b5061056d735ffe7fb82894076ecb99a30d6a32e969e6e35e9881565b34801561061357600080fd5b50610531610e56565b34801561062857600080fd5b5061056d610ef0565b34801561063d57600080fd5b50610646610f09565b6040519015158152602001610581565b34801561066257600080fd5b5061056d610fa7565b34801561067757600080fd5b5061056d610fc3565b34801561068c57600080fd5b5061053161069b366004615656565b610fdf565b3480156106ac57600080fd5b50610531611160565b3480156106c157600080fd5b506105316106d0366004615656565b611192565b3480156106e157600080fd5b506106ea6111c6565b604051908152602001610581565b34801561070457600080fd5b50610531610713366004615639565b6111d9565b34801561072457600080fd5b50610646610733366004615639565b611226565b34801561074457600080fd5b5061056d73abc000d88f23bb45525e447528dbf656a9d55bf581565b61053161076e366004615749565b61126d565b34801561077f57600080fd5b506106ea611288565b34801561079457600080fd5b5061056d6112b7565b3480156107a957600080fd5b5061056d73d061d61a4d941c39e5453435b6345dc261c2fce081565b3480156107d157600080fd5b5061056d6112c1565b3480156107e657600080fd5b506106ea6112cb565b3480156107fb57600080fd5b5061080461133f565b60408051938452602084019290925290820152606001610581565b34801561082b57600080fd5b5061083461137f565b60405161058191906157f2565b34801561084d57600080fd5b50610646611394565b34801561086257600080fd5b5061086b6113b1565b6040516105819190615829565b34801561088457600080fd5b50610531610893366004615639565b61144c565b3480156108a457600080fd5b5061086b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b3480156108ed57600080fd5b5061056d611524565b34801561090257600080fd5b5061056d61152e565b34801561091757600080fd5b5061056d61154a565b34801561092c57600080fd5b5061053161093b366004615895565b611591565b34801561094c57600080fd5b5061056d611805565b34801561096157600080fd5b5061056d61180f565b34801561097657600080fd5b506106ea611819565b34801561098b57600080fd5b5061053161099a366004615639565b611823565b3480156109ab57600080fd5b506105316109ba366004615639565b6118fb565b3480156109cb57600080fd5b506108346119d3565b3480156109e057600080fd5b506106ea611a3d565b3480156109f557600080fd5b506106ea611ac3565b348015610a0a57600080fd5b506106ea611ad6565b348015610a1f57600080fd5b5061056d611af0565b348015610a3457600080fd5b5061056d611afa565b348015610a4957600080fd5b5061056d611b16565b348015610a5e57600080fd5b5061056d611b1c565b348015610a7357600080fd5b506106ea610a823660046159b4565b611b26565b348015610a9357600080fd5b5060408051808201909152600581527f352e352e30000000000000000000000000000000000000000000000000000000602082015261086b565b60008060ff19610afe60017fbab41e3047bd82ac921d110ce90c261faaf0692d942b70fdb1fe065d060ad3786159f6565b604051602001610b1091815260200190565b60408051601f1981840301815291905280516020909101201692915050565b610b4433610b3b611df3565b60050190611e24565b610b60576040516282b42960e81b815260040160405180910390fd5b6000610b6a611805565b90506001600160a01b038116610bac576040517fb4b53f4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bb4611524565b6001600160a01b0316826001600160a01b03161480610bd75750610bd782611226565b15610bf55760405163b92ab52360e01b815260040160405180910390fd5b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03831601610c3357610c2f8147611e49565b5050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190615a09565b9050610cb46001600160a01b0384168383611efd565b505050565b6000610cc3610e3a565b6001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190615a22565b905090565b610d31610cb9565b6001600160a01b0316336001600160a01b031614610d61576040516282b42960e81b815260040160405180910390fd5b610c2f81610d6d611df3565b60050190611f71565b610d7e610cb9565b6001600160a01b0316336001600160a01b031614610dae576040516282b42960e81b815260040160405180910390fd5b6127108110610de9576040517f334ee9a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610df3610acd565b600981015460408051918252602082018590529192507f07af09e2b23ebab5dd29fa2271d6ca4795031f308caf26ca605f4a719ffeed61910160405180910390a160090155565b6000610e44611df3565b600101546001600160a01b0316919050565b610e6233610b3b611df3565b610e7e576040516282b42960e81b815260040160405180910390fd5b6000610e88610acd565b600c810154604051630100000090910460ff16158082529192507f84d6c3a244edb3ffef8942c77ef1ae9b9a4e5d6fbad41240137530449cac56d09060200160405180910390a1600c909101805491151563010000000263ff00000019909216919091179055565b6000610efa610acd565b546001600160a01b0316919050565b600080610f14610e3a565b6040517f228bfd9f0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03919091169063228bfd9f9060240161012060405180830381865afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190615a3f565b50969998505050505050505050565b6000610fb1610acd565b600201546001600160a01b0316919050565b6000610fcd611df3565b600401546001600160a01b0316919050565b610fe7610e3a565b6001600160a01b0316336001600160a01b031614611017576040516282b42960e81b815260040160405180910390fd5b6000611021611df3565b805460018201546040516370a0823160e01b81523060048201529293506001600160a01b039182169291169060009083906370a0823190602401602060405180830381865afa158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c9190615a09565b90508481106110be576110b96001600160a01b0384168387611efd565b611159565b6110d06110cb82876159f6565b611f86565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190615a09565b9050611159826111488784611fea565b6001600160a01b0386169190611efd565b5050505050565b61116c33610b3b611df3565b611188576040516282b42960e81b815260040160405180910390fd5b611190611ffa565b565b61119e33610b3b611df3565b6111ba576040516282b42960e81b815260040160405180910390fd5b6111c3816121dc565b50565b60006111d0610acd565b60090154905090565b6111e1610cb9565b6001600160a01b0316336001600160a01b031614611211576040516282b42960e81b815260040160405180910390fd5b610c2f8161121d611df3565b60050190612209565b6000611230611b1c565b6001600160a01b0316826001600160a01b031614806112675750611252611524565b6001600160a01b0316826001600160a01b0316145b92915050565b61127561221e565b61127e826122ac565b610c2f82826122e4565b60006112926123cc565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000610fcd610acd565b6000610fb1612415565b60006112d5611b1c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190615a09565b600080600061135033610b3b611df3565b61136c576040516282b42960e81b815260040160405180910390fd5b611374612446565b925092509250909192565b6060610d2461138c611df3565b6005016127cd565b600061139e610acd565b600c01546301000000900460ff16919050565b60606113bb611df3565b60070180546113c990615ab3565b80601f01602080910402602001604051908101604052809291908181526020018280546113f590615ab3565b80156114425780601f1061141757610100808354040283529160200191611442565b820191906000526020600020905b81548152906001019060200180831161142557829003601f168201915b5050505050905090565b611454610cb9565b6001600160a01b0316336001600160a01b031614611484576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166114ab5760405163fb7566d760e01b815260040160405180910390fd5b60006114b5610acd565b6006810154604080516001600160a01b03928316815291851660208301529192507fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a160060180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610efa611df3565b6000611538610acd565b600301546001600160a01b0316919050565b6000611554610e3a565b6001600160a01b031663c12d636b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d00573d6000803e3d6000fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156115dc5750825b905060008267ffffffffffffffff1660011480156115f95750303b155b905081158015611607575080155b156116255760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561165957845468ff00000000000000001916680100000000000000001785555b611662886127da565b6001600160a01b0387166116895760405163fb7566d760e01b815260040160405180910390fd5b6040517f1526fe270000000000000000000000000000000000000000000000000000000081526004810187905260009081906001600160a01b038a1690631526fe279060240160c060405180830381865afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190615aed565b5050935050509150611720611b16565b6001600160a01b0316826001600160a01b03161461176a576040517f89e981ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611774612415565b6001810180546001600160a01b03808e166001600160a01b03199283161790925560028301805495909216941693909317909255506003018790555083156117fb57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6000611538611df3565b6000610e44612415565b60006112d56112c1565b61182b610cb9565b6001600160a01b0316336001600160a01b03161461185b576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166118825760405163fb7566d760e01b815260040160405180910390fd5b600061188c611df3565b6003810154604080516001600160a01b03928316815291851660208301529192507f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b9706910160405180910390a160030180546001600160a01b0319166001600160a01b0392909216919091179055565b611903610cb9565b6001600160a01b0316336001600160a01b031614611933576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811661195a5760405163fb7566d760e01b815260040160405180910390fd5b6000611964611df3565b6004810154604080516001600160a01b03928316815291851660208301529192507f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe910160405180910390a160040180546001600160a01b0319166001600160a01b0392909216919091179055565b60606119dd610acd565b600b0180548060200260200160405190810160405280929190818152602001828054801561144257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a16575050505050905090565b6000611a47611819565b611a4f611b1c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab99190615a09565b610d249190615b74565b6000611acd612415565b60030154905090565b6000611ae8611ae3611a3d565b612e73565b611a4f611524565b6000610efa612415565b6000611b04610acd565b600601546001600160a01b0316919050565b6000610d245b6000610e44610acd565b6000611b3433610b3b611df3565b611b50576040516282b42960e81b815260040160405180910390fd5b6000611b5a611df3565b805460048201549192506001600160a01b03908116918116908616821480611b865750611b8686611226565b15611ba45760405163b92ab52360e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0f9190615a09565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038916906370a0823190602401602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190615a09565b90508015611d38576040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015289169063dd62ed3e90604401602060405180830381865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e9190615a09565b811115611d2b57611d2b6001600160a01b038916846000196133fd565b611d368885836134bb565b505b6040516370a0823160e01b815230600482015282906001600160a01b038616906370a0823190602401602060405180830381865afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190615a09565b611dac91906159f6565b955086861015611de8576040517f8edbf6d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505092915050565b60008060ff19610afe60017f2406840ad5584694fd0fd68ca814242285d2c2d94aaaee51ccea0b7e08ea3d5c6159f6565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b80471015611e91576040517fcf479181000000000000000000000000000000000000000000000000000000008152476004820152602481018290526044015b60405180910390fd5b600080836001600160a01b03168360405160006040518083038185875af1925050503d8060008114611edf576040519150601f19603f3d011682016040523d82523d6000602084013e611ee4565b606091505b509150915081611ef757611ef781613570565b50505050565b6040516001600160a01b03838116602483015260448201839052610cb491859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135b2565b6000611e42836001600160a01b03841661363c565b6000611f906112cb565b90506000611f9c611819565b611fa69083615b74565b90506000611fd0611fb683612e73565b611fc08487615b87565b611fca9190615b9e565b83611fea565b905080600003611fe05750505050565b611ef7838261372f565b6000828218828410028218611e42565b6000612004610fa7565b905046600103612080576040516335313c2160e11b81526001600160a01b038216600482015273d061d61a4d941c39e5453435b6345dc261c2fce090636a62784290602401600060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b50505050612188565b6040517f4b9203790000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015273abc000d88f23bb45525e447528dbf656a9d55bf590634b92037990602401602060405180830381865afa1580156120f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121159190615bc0565b15612188576040516335313c2160e11b81526001600160a01b038216600482015273abc000d88f23bb45525e447528dbf656a9d55bf590636a62784290602401600060405180830381600087803b15801561216f57600080fd5b505af1158015612183573d6000803e3d6000fd5b505050505b806001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156121c357600080fd5b505af19250505080156121d4575060015b156111c35750565b6121e58161397d565b6111c36121f061180f565b826121f9611b1c565b6001600160a01b031691906133fd565b6000611e42836001600160a01b038416613c13565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061228e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612282613c62565b6001600160a01b031614155b156111905760405163703e46dd60e11b815260040160405180910390fd5b6122b4610cb9565b6001600160a01b0316336001600160a01b0316146111c3576040516282b42960e81b815260040160405180910390fd5b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561233e575060408051601f3d908101601f1916820190925261233b91810190615a09565b60015b61236657604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611e88565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146123c2576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401611e88565b610cb48383613c8a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111905760405163703e46dd60e11b815260040160405180910390fd5b60008060ff19610afe60017f01191ad2b9c93519c7c8e8e1a3356cfaca04cd0a8d159aa7f8e90f91b5cdf0ef6159f6565b600080600080612454610e3a565b6040517fd53ddc260000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b0383169063d53ddc2690602401602060405180830381865afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db9190615a09565b6040517f9f2b28330000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b03841690639f2b283390602401602060405180830381865afa15801561253e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125629190615a09565b9050600061256e611524565b9050600061257a6112cb565b90506000612586611819565b6125909083615b74565b9050600061259d82612e73565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190615a09565b905060006126198383615b74565b9050868111156126345761262d87826159f6565b9b50612641565b61263e81886159f6565b9a505b600061264d898e615b74565b90508281111561270557600061266384836159f6565b90506000612685866126758985615b87565b61267f9190615b9e565b88611fea565b9050801561270257612697888261372f565b6040516370a0823160e01b81523060048201526001600160a01b038a16906370a0823190602401602060405180830381865afa1580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff9190615a09565b94505b50505b61270f838a611fea565b9a508a831161271f576000612732565b61273261272c8c856159f6565b8e611fea565b6040517f05bed04600000000000000000000000000000000000000000000000000000000815260048101829052602481018e9052604481018d9052909d506001600160a01b038b16906305bed04690606401600060405180830381600087803b15801561279e57600080fd5b505af11580156127b2573d6000803e3d6000fd5b505050506127be613ce0565b50505050505050505050909192565b60606000611e4283613e48565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156128255750825b905060008267ffffffffffffffff1660011480156128425750303b155b905081158015612850575080155b1561286e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156128a257845468ff00000000000000001916680100000000000000001785555b6128bc866000015187602001516001896101200151613ea4565b60408601516001600160a01b031615806128e1575060808601516001600160a01b0316155b806128f7575060e08601516001600160a01b0316155b8061290e57506101008601516001600160a01b0316155b1561292c5760405163fb7566d760e01b815260040160405180910390fd5b60405163124fd3dd60e21b815260076004820152600090735ffe7fb82894076ecb99a30d6a32e969e6e35e989063493f4f7490602401602060405180830381865afa15801561297f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a39190615a22565b60408089015190517f379510490000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291925060009190831690633795104990602401602060405180830381865afa158015612a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a329190615a22565b90506001600160a01b038116612a74576040517f02de52d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408881015190517fdaf297b90000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260009184169063daf297b990602401602060405180830381865afa158015612adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aff9190615a22565b90506001600160a01b038116612b41576040517f1edbf35700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612b4b610acd565b90506000612b62858c604001518d60e0015161408e565b600c8601805460ff1916831515179055600a860183905583519094508490612b9390600b8801906020870190615540565b50505050508a604001518260000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550838260010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828260020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a606001518260030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a608001518260040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a60e001518260050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a61010001518260060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a60c0015182600901819055508a60a0015182600c0160016101000a81548160ff02191690831515021790555081600c0160009054906101000a900460ff1615612d935760608b01516001600160a01b0316612d54576040517fb7fb9bcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608b01516007830180546001600160a01b039283166001600160a01b03199182161790915560408d0151600885018054919093169116179055612dba565b60408b01516007830180546001600160a01b0319166001600160a01b039092169190911790555b808015612dd3575060608b01516001600160a01b031615155b15612e035760608b01516007830180546001600160a01b0319166001600160a01b03909216919091179055612e1b565b600c8201805462ff0000191662010000831515021790555b50505050508315612e6b57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600081600003612e8557506000919050565b60405163124fd3dd60e21b815260076004820152600090735ffe7fb82894076ecb99a30d6a32e969e6e35e989063493f4f7490602401602060405180830381865afa158015612ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc9190615a22565b90506000612f08611524565b90506000612f14610ef0565b60405163940494f160e01b81526001600160a01b03808316600483015291925060009185169063940494f190602401602060405180830381865afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190615a09565b604051639ac90d3d60e01b81526001600160a01b038481166004830152919250600091861690639ac90d3d9060240161010060405180830381865afa158015612fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff59190615bdd565b6040516392e3cc2d60e01b81526001600160a01b0385811660048301529192506000918716906392e3cc2d9060240161010060405180830381865afa158015613042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130669190615c47565b90506000613072611b1c565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d39190615a09565b9050886130de614460565b1561337e57825160009083906130f49084615b87565b6130fe9190615b9e565b855190915061310e908983614476565b613118908b615b74565b995082846001602002015161312d9084615b87565b6131379190615b9e565b60208601516040517fbdf475c30000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529294509091600091908c169063bdf475c390602401602060405180830381865afa1580156131a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c89190615a22565b9050816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322c9190615a09565b60405163940494f160e01b81526001600160a01b038381166004830152919650908c169063940494f190602401602060405180830381865afa158015613276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329a9190615a09565b604051639ac90d3d60e01b81526001600160a01b038381166004830152919950908c1690639ac90d3d9060240161010060405180830381865afa1580156132e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133099190615bdd565b6040516392e3cc2d60e01b81526001600160a01b038381166004830152919850908c16906392e3cc2d9060240161010060405180830381865afa158015613354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133789190615c47565b95505050505b60005b858110156133ef5760008385836008811061339e5761339e615c9e565b60200201516133ad9085615b87565b6133b79190615b9e565b90506133da8683600881106133ce576133ce615c9e565b60200201518a83614476565b6133e4908c615b74565b9a5050600101613381565b505050505050505050919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261347c8482614566565b611ef7576040516001600160a01b038481166024830152600060448301526134b191869182169063095ea7b390606401611f2a565b611ef784826135b2565b60006134c5610fc3565b6040517f6ccb2b010000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015260448201859052600160648301523060848301529190911690636ccb2b019060a4016020604051808303816000875af1158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190615a09565b949350505050565b8051156135805780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080602060008451602086016000885af1806135d5576040513d6000823e3d81fd5b50506000513d915081156135ed5780600114156135fa565b6001600160a01b0384163b155b15611ef7576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611e88565b600081815260018301602052604081205480156137255760006136606001836159f6565b8554909150600090613674906001906159f6565b90508082146136d957600086600001828154811061369457613694615c9e565b90600052602060002001549050808760000184815481106136b7576136b7615c9e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806136ea576136ea615cb4565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611267565b6000915050611267565b818111156137495761374961374483836159f6565b6145b5565b6000613753611524565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561379d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c19190615a09565b905060006137d76137d0611b1c565b8486614476565b905060006137e36119d3565b80519091506137f28187614686565b60005b818110156138c557600083828151811061381157613811615c9e565b60200260200101519050866001600160a01b0316816001600160a01b03160361383a57506138bd565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a59190615a09565b905080156138ba576138b88289836134bb565b505b50505b6001016137f5565b506040516370a0823160e01b8152306004820152839085906001600160a01b038816906370a0823190602401602060405180830381865afa15801561390e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139329190615a09565b61393c91906159f6565b1015613974576040517f850c6f7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b61398681614b47565b6000613990610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b840180548451818402810184019095528085529294936101608601939092830182828015613a7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613a60575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608085019190915263010000009092041615156080909201919091528101519091506001600160a01b031615613b0857613b0881606001518383602001516001600160a01b03166133fd9092919063ffffffff16565b6000613b12610fc3565b61016083015180519192509060005b81811015613b88576000838281518110613b3d57613b3d615c9e565b60200260200101519050613b658588836001600160a01b03166133fd9092919063ffffffff16565b6080860151613b7f906001600160a01b03831690896133fd565b50600101613b21565b50604080850151608086015191517f1d2747d40000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260016024820152911690631d2747d490604401600060405180830381600087803b158015613bf657600080fd5b505af1925050508015613c07575060015b15611159575050505050565b6000818152600183016020526040812054613c5a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611267565b506000611267565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610efa565b613c9382614b72565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115613cd857610cb48282614be9565b610c2f614c5f565b613ce8614c97565b613cf0614c9f565b6000613cfa611b1c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015613d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d649190615a09565b905080156111c357613d7461180f565b6001600160a01b03166343a0d066613d8a611ac3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260248101849052600160448201526064016020604051808303816000875af1158015613dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e129190615bc0565b6111c3576040517f3fb65bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081600001805480602002602001604051908101604052809291908181526020018280548015613e9857602002820191906000526020600020905b815481526020019060010190808311613e84575b50505050509050919050565b613eac614d8e565b613eb4614df5565b6001600160a01b0384161580613ed157506001600160a01b038316155b80613ee357506001600160a01b038216155b15613f015760405163fb7566d760e01b815260040160405180910390fd5b6000613f0b611df3565b9050848160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f989190615a22565b81546001600160a01b03199081166001600160a01b03928316178355600283018054909116858316179055604080517f0c340a24000000000000000000000000000000000000000000000000000000008152905191871691630c340a24916004808201926020929091908290030181865afa15801561401b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061403f9190615a22565b6003820180546001600160a01b03199081166001600160a01b0393841617909155600483018054909116918616919091179055600781016140808382615d12565b50612e6b6005820133612209565b606060008060008061409e611524565b6040517f0a700c080000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529192506000918a1690630a700c0890602401602060405180830381865afa158015614103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141279190615a09565b90508067ffffffffffffffff8111156141425761414261566f565b60405190808252806020026020018201604052801561416b578160200160208202803683370190505b506040517fa77576ef0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529197506000918b169063a77576ef9060240161010060405180830381865afa1580156141d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f69190615bdd565b9050600019955060005b828110156142d45781816008811061421a5761421a615c9e565b602002015188828151811061423157614231615c9e565b6001600160a01b039283166020918202929092010152841682826008811061425b5761425b615c9e565b60200201516001600160a01b031614806142c3575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82826008811061429757614297615c9e565b60200201516001600160a01b03161480156142c35750886001600160a01b0316846001600160a01b0316145b156142cc578096505b600101614200565b508186111561430f576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe4d332a90000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528b169063e4d332a990602401602060405180830381865afa15801561436e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143929190615bc0565b94508415801561444a5750604051639ac90d3d60e01b81526001600160a01b038a811660048301528b1690639ac90d3d9060240161010060405180830381865afa1580156143e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144089190615bdd565b866008811061441957614419615c9e565b60200201516001600160a01b031681876008811061443957614439615c9e565b60200201516001600160a01b031614155b1561445457600193505b50505093509350935093565b600061446a610acd565b600c015460ff16919050565b6000826001600160a01b0316846001600160a01b031603614498575080611e42565b6127106144a36111c6565b6144af906127106159f6565b6144b7611afa565b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015260448201879052919091169063b646638490606401602060405180830381865afa158015614527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061454b9190615a09565b6145559190615b87565b61455f9190615b9e565b9050611e42565b6000806000806020600086516020880160008a5af192503d915060005190508280156145ab5750811561459c57806001146145ab565b6000866001600160a01b03163b115b9695505050505050565b80156111c3576145c36112c1565b6040517fc32e720200000000000000000000000000000000000000000000000000000000815260048101839052600060248201526001600160a01b03919091169063c32e7202906044016020604051808303816000875af115801561462c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146509190615bc0565b6111c3576040517fcba458bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000614690610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b84018054845181840281018401909552808552929493610160860193909283018282801561477e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614760575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608085019190915263010000009092041615156080909201919091528151908201516101e08301519293509091156147ee576111598385614dfd565b826101a00151156148c05760008567ffffffffffffffff8111156148145761481461566f565b60405190808252806020026020018201604052801561483d578160200160208202803683370190505b506040517fd40ddb8c0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0384169063d40ddb8c906148889088908590600401615e03565b600060405180830381600087803b1580156148a257600080fd5b505af11580156148b6573d6000803e3d6000fd5b5050505050611159565b84600203614978576148d06155a5565b6001600160a01b03821615614944576040516316cd8e2760e21b81526001600160a01b03831690635b36389c9061490d9088908590600401615e1c565b600060405180830381600087803b15801561492757600080fd5b505af115801561493b573d6000803e3d6000fd5b50505050614972565b6040516316cd8e2760e21b81526001600160a01b03841690635b36389c906148889088908590600401615e1c565b50611159565b84600303614a27576149886155c3565b6001600160a01b038216156149e0576040517f8fa892a60000000000000000000000000000000000000000000000000000000081526001600160a01b03831690638fa892a69061490d90869089908690600401615e77565b6040517fecb586a50000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063ecb586a5906148889088908590600401615e9b565b8460040361115957614a376155e1565b6001600160a01b03821615614ac6576040517fad5cc9180000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063ad5cc91890614a8f90869089908690600401615ed2565b600060405180830381600087803b158015614aa957600080fd5b505af1158015614abd573d6000803e3d6000fd5b50505050612e6b565b6040517f7d49d8750000000000000000000000000000000000000000000000000000000081526001600160a01b03841690637d49d87590614b0d9088908590600401615ef6565b600060405180830381600087803b158015614b2757600080fd5b505af1158015614b3b573d6000803e3d6000fd5b50505050505050505050565b6000614b51611df3565b60018101548154919250610c2f916001600160a01b039081169116846133fd565b806001600160a01b03163b600003614ba857604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611e88565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051614c069190615f0a565b600060405180830381855af49150503d8060008114614c41576040519150601f19603f3d011682016040523d82523d6000602084013e614c46565b606091505b5091509150614c56858383614fa2565b95945050505050565b3415611190576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611190615017565b6000614ca9610fa7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015614cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d179190615a09565b90508015610c2f576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015614d7a57600080fd5b505af1158015612e6b573d6000803e3d6000fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16611190576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611190614d8e565b6101408201516060830151600191906001600160a01b031615614eb357606084015184516040517f29ed28620000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101869052600f84900b6044820152606481018590529116906329ed2862906084015b600060405180830381600087803b158015614e9657600080fd5b505af1158015614eaa573d6000803e3d6000fd5b50505050611ef7565b836101c0015115614f1f5783516040517f517a55a300000000000000000000000000000000000000000000000000000000815260048101859052600f83900b602482015260448101849052600160648201526001600160a01b039091169063517a55a390608401614e7c565b83516040517f1a4d01d200000000000000000000000000000000000000000000000000000000815260048101859052600f83900b6024820152604481018490526001600160a01b0390911690631a4d01d290606401600060405180830381600087803b158015614f8e57600080fd5b505af11580156117fb573d6000803e3d6000fd5b606082614fb757614fb282613570565b611e42565b8151158015614fce57506001600160a01b0384163b155b15615010576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611e88565b5080611e42565b6000615021610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b84018054845181840281018401909552808552929493610160860193909283018282801561510f57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116150f1575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608085019190915263010000009092041615156080909201919091529091506000808061516f85615228565b929650909450925090508015615186575050505050565b5083608001516001600160a01b03166326a38e64828660e0015187602001518860400151896101600151518a61016001518a8a8d6101c001518e6101a001518f61010001516040518c63ffffffff1660e01b81526004016151f09a99989796959493929190615f26565b6000604051808303818588803b15801561520957600080fd5b505af115801561521d573d6000803e3d6000fd5b505050505050505050565b60408051600880825261012082019092526060916000918291829182916020820161010080368337505050610160870151519091506000908190600190825b8181101561552f5760008b6101600151828151811061528857615288615c9e565b6020026020010151905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316816001600160a01b0316036154515784156152f7576040517faa49921600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a08c01516040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015615340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153649190615a09565b88848151811061537657615376615c9e565b602002602001018181525050806001600160a01b0316632e1a7d4d8985815181106153a3576153a3615c9e565b60200260200101516040518263ffffffff1660e01b81526004016153c991815260200190565b600060405180830381600087803b1580156153e357600080fd5b505af11580156153f7573d6000803e3d6000fd5b5050505087838151811061540d5761540d615c9e565b6020026020010151955061543f818e602001518a868151811061543257615432615c9e565b6020026020010151614476565b6154499088615b74565b9650506154ff565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015615495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154b99190615a09565b8783815181106154cb576154cb615c9e565b6020026020010181815250506154f2818d6020015189858151811061543257615432615c9e565b6154fc9087615b74565b95505b600087838151811061551357615513615c9e565b6020026020010151111561552657600093505b50600101615267565b509399929850909650945092505050565b828054828255906000526020600020908101928215615595579160200282015b8281111561559557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190615560565b506155a19291506155ff565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b808211156155a15760008155600101615600565b6001600160a01b03811681146111c357600080fd5b803561563481615614565b919050565b60006020828403121561564b57600080fd5b8135611e4281615614565b60006020828403121561566857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156156a9576156a961566f565b60405290565b604051610100810167ffffffffffffffff811182821017156156a9576156a961566f565b600067ffffffffffffffff808411156156ee576156ee61566f565b604051601f8501601f19908116603f011681019082821181831017156157165761571661566f565b8160405280935085815286868601111561572f57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561575c57600080fd5b823561576781615614565b9150602083013567ffffffffffffffff81111561578357600080fd5b8301601f8101851361579457600080fd5b6157a3858235602084016156d3565b9150509250929050565b60008151808452602080850194506020840160005b838110156157e75781516001600160a01b0316875295820195908201906001016157c2565b509495945050505050565b602081526000611e4260208301846157ad565b60005b83811015615820578181015183820152602001615808565b50506000910152565b6020815260008251806020840152615848816040850160208701615805565b601f01601f19169190910160400192915050565b80151581146111c357600080fd5b80356156348161585c565b600082601f83011261588657600080fd5b611e42838335602085016156d3565b6000806000606084860312156158aa57600080fd5b833567ffffffffffffffff808211156158c257600080fd5b9085019061014082880312156158d757600080fd5b6158df615685565b6158e883615629565b81526158f660208401615629565b602082015261590760408401615629565b604082015261591860608401615629565b606082015261592960808401615629565b608082015261593a60a0840161586a565b60a082015260c083013560c082015261595560e08401615629565b60e0820152610100615968818501615629565b90820152610120838101358381111561598057600080fd5b61598c8a828701615875565b8284015250508095505050506159a460208501615629565b9150604084013590509250925092565b600080604083850312156159c757600080fd5b82356159d281615614565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611267576112676159e0565b600060208284031215615a1b57600080fd5b5051919050565b600060208284031215615a3457600080fd5b8151611e4281615614565b60008060008060008060008060006101208a8c031215615a5e57600080fd5b8951615a698161585c565b8099505060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600181811c90821680615ac757607f821691505b602082108103615ae757634e487b7160e01b600052602260045260246000fd5b50919050565b60008060008060008060c08789031215615b0657600080fd5b8651615b1181615614565b6020880151909650615b2281615614565b6040880151909550615b3381615614565b6060880151909450615b4481615614565b6080880151909350615b5581615614565b60a0880151909250615b668161585c565b809150509295509295509295565b80820180821115611267576112676159e0565b8082028115828204841417611267576112676159e0565b600082615bbb57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615bd257600080fd5b8151611e428161585c565b6000610100808385031215615bf157600080fd5b83601f840112615c0057600080fd5b615c086156af565b908301908085831115615c1a57600080fd5b845b83811015615c3d578051615c2f81615614565b835260209283019201615c1c565b5095945050505050565b6000610100808385031215615c5b57600080fd5b83601f840112615c6a57600080fd5b615c726156af565b908301908085831115615c8457600080fd5b845b83811015615c3d578051835260209283019201615c86565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b601f821115610cb4576000816000526020600020601f850160051c81016020861015615cf35750805b601f850160051c820191505b81811015612e6b57828155600101615cff565b815167ffffffffffffffff811115615d2c57615d2c61566f565b615d4081615d3a8454615ab3565b84615cca565b602080601f831160018114615d755760008415615d5d5750858301515b600019600386901b1c1916600185901b178555612e6b565b600085815260208120601f198616915b82811015615da457888601518255948401946001909101908401615d85565b5085821015615dc25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008151808452602080850194506020840160005b838110156157e757815187529582019590820190600101615de7565b8281526040602082015260006135686040830184615dd2565b8281526060810160208083018460005b6002811015615e4957815183529183019190830190600101615e2c565b505050509392505050565b8060005b6003811015611ef7578151845260209384019390910190600101615e58565b6001600160a01b03841681526020810183905260a081016135686040830184615e54565b82815260808101611e426020830184615e54565b8060005b6004811015611ef7578151845260209384019390910190600101615eb3565b6001600160a01b03841681526020810183905260c081016135686040830184615eaf565b82815260a08101611e426020830184615eaf565b60008251615f1c818460208701615805565b9190910192915050565b60006101406001600160a01b03808e168452808d166020850152808c1660408501528a6060850152816080850152615f608285018b6157ad565b915083820360a0850152615f74828a615dd2565b60c085019890985295151560e0840152505091151561010083015290911661012090910152969550505050505056fea2646970667358221220ab698503170b7fa78b26f05d0bd7023e78e408836698f6f52318b5ce6fdd020d64736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106103225760003560e01c80637d7c2a1c116101a5578063c965fa8a116100ec578063e5328e0611610095578063ec78e8321161006f578063ec78e83214610a3d578063edb13ecb14610a52578063ee330ee314610a67578063ffa1ad7414610a8757600080fd5b8063e5328e06146109fe578063e89133b214610a13578063eaada38214610a2857600080fd5b8063d95bd6c9116100c6578063d95bd6c9146109bf578063de603fdc146109d4578063e529ee95146109e957600080fd5b8063c965fa8a1461096a578063d2c35ce81461097f578063d3033c391461099f57600080fd5b8063b2016bd41161014e578063c166f3cb11610128578063c166f3cb14610920578063c415b95c14610940578063c6def0761461095557600080fd5b8063b2016bd4146108e1578063be933ae6146108f6578063c12d636b1461090b57600080fd5b8063a3f4df7e1161017f578063a3f4df7e14610856578063abc9b45e14610878578063ad3cb1cc1461089857600080fd5b80637d7c2a1c146107ef578063951dc22c1461081f5780639fd395401461084157600080fd5b8063372500ab116102695780634f1ef2861161021257806374db9ad4116101ec57806374db9ad41461079d57806379054cc9146107c5578063795dae66146107da57600080fd5b80634f1ef2861461076057806352d1902d1461077357806366519bd61461078857600080fd5b80634032b72b116102435780634032b72b146106f8578063440d7248146107185780634a2b9e071461073857600080fd5b8063372500ab146106a05780633ac9fc11146106b55780633e032a3b146106d557600080fd5b80631ef1314f116102cb578063280718e2116102a5578063280718e2146106565780632b3297f91461066b5780632e1a7d4d1461068057600080fd5b80631ef1314f14610607578063218751b21461061c57806322f3e2d41461063157600080fd5b806315b0d496116102fc57806315b0d496146105aa57806316f0115b146105ca5780631848effa146105df57600080fd5b806301681a62146105385780630c340a241461055857806314ae9f2e1461058a57600080fd5b36610533576000610331610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b84018054845181840281018401909552808552929493610160860193909283018282801561041f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610401575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608401526301000000909104161515608090910152805160a082015191925090336001600160a01b038316148015906104955750336001600160a01b03821614155b156104cc576040517fe765476500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216330361053157806001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561051757600080fd5b505af115801561052b573d6000803e3d6000fd5b50505050505b005b600080fd5b34801561054457600080fd5b50610531610553366004615639565b610b2f565b34801561056457600080fd5b5061056d610cb9565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561059657600080fd5b506105316105a5366004615639565b610d29565b3480156105b657600080fd5b506105316105c5366004615656565b610d76565b3480156105d657600080fd5b5061056d610e3a565b3480156105eb57600080fd5b5061056d735ffe7fb82894076ecb99a30d6a32e969e6e35e9881565b34801561061357600080fd5b50610531610e56565b34801561062857600080fd5b5061056d610ef0565b34801561063d57600080fd5b50610646610f09565b6040519015158152602001610581565b34801561066257600080fd5b5061056d610fa7565b34801561067757600080fd5b5061056d610fc3565b34801561068c57600080fd5b5061053161069b366004615656565b610fdf565b3480156106ac57600080fd5b50610531611160565b3480156106c157600080fd5b506105316106d0366004615656565b611192565b3480156106e157600080fd5b506106ea6111c6565b604051908152602001610581565b34801561070457600080fd5b50610531610713366004615639565b6111d9565b34801561072457600080fd5b50610646610733366004615639565b611226565b34801561074457600080fd5b5061056d73abc000d88f23bb45525e447528dbf656a9d55bf581565b61053161076e366004615749565b61126d565b34801561077f57600080fd5b506106ea611288565b34801561079457600080fd5b5061056d6112b7565b3480156107a957600080fd5b5061056d73d061d61a4d941c39e5453435b6345dc261c2fce081565b3480156107d157600080fd5b5061056d6112c1565b3480156107e657600080fd5b506106ea6112cb565b3480156107fb57600080fd5b5061080461133f565b60408051938452602084019290925290820152606001610581565b34801561082b57600080fd5b5061083461137f565b60405161058191906157f2565b34801561084d57600080fd5b50610646611394565b34801561086257600080fd5b5061086b6113b1565b6040516105819190615829565b34801561088457600080fd5b50610531610893366004615639565b61144c565b3480156108a457600080fd5b5061086b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b3480156108ed57600080fd5b5061056d611524565b34801561090257600080fd5b5061056d61152e565b34801561091757600080fd5b5061056d61154a565b34801561092c57600080fd5b5061053161093b366004615895565b611591565b34801561094c57600080fd5b5061056d611805565b34801561096157600080fd5b5061056d61180f565b34801561097657600080fd5b506106ea611819565b34801561098b57600080fd5b5061053161099a366004615639565b611823565b3480156109ab57600080fd5b506105316109ba366004615639565b6118fb565b3480156109cb57600080fd5b506108346119d3565b3480156109e057600080fd5b506106ea611a3d565b3480156109f557600080fd5b506106ea611ac3565b348015610a0a57600080fd5b506106ea611ad6565b348015610a1f57600080fd5b5061056d611af0565b348015610a3457600080fd5b5061056d611afa565b348015610a4957600080fd5b5061056d611b16565b348015610a5e57600080fd5b5061056d611b1c565b348015610a7357600080fd5b506106ea610a823660046159b4565b611b26565b348015610a9357600080fd5b5060408051808201909152600581527f352e352e30000000000000000000000000000000000000000000000000000000602082015261086b565b60008060ff19610afe60017fbab41e3047bd82ac921d110ce90c261faaf0692d942b70fdb1fe065d060ad3786159f6565b604051602001610b1091815260200190565b60408051601f1981840301815291905280516020909101201692915050565b610b4433610b3b611df3565b60050190611e24565b610b60576040516282b42960e81b815260040160405180910390fd5b6000610b6a611805565b90506001600160a01b038116610bac576040517fb4b53f4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bb4611524565b6001600160a01b0316826001600160a01b03161480610bd75750610bd782611226565b15610bf55760405163b92ab52360e01b815260040160405180910390fd5b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03831601610c3357610c2f8147611e49565b5050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e9190615a09565b9050610cb46001600160a01b0384168383611efd565b505050565b6000610cc3610e3a565b6001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190615a22565b905090565b610d31610cb9565b6001600160a01b0316336001600160a01b031614610d61576040516282b42960e81b815260040160405180910390fd5b610c2f81610d6d611df3565b60050190611f71565b610d7e610cb9565b6001600160a01b0316336001600160a01b031614610dae576040516282b42960e81b815260040160405180910390fd5b6127108110610de9576040517f334ee9a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610df3610acd565b600981015460408051918252602082018590529192507f07af09e2b23ebab5dd29fa2271d6ca4795031f308caf26ca605f4a719ffeed61910160405180910390a160090155565b6000610e44611df3565b600101546001600160a01b0316919050565b610e6233610b3b611df3565b610e7e576040516282b42960e81b815260040160405180910390fd5b6000610e88610acd565b600c810154604051630100000090910460ff16158082529192507f84d6c3a244edb3ffef8942c77ef1ae9b9a4e5d6fbad41240137530449cac56d09060200160405180910390a1600c909101805491151563010000000263ff00000019909216919091179055565b6000610efa610acd565b546001600160a01b0316919050565b600080610f14610e3a565b6040517f228bfd9f0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03919091169063228bfd9f9060240161012060405180830381865afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190615a3f565b50969998505050505050505050565b6000610fb1610acd565b600201546001600160a01b0316919050565b6000610fcd611df3565b600401546001600160a01b0316919050565b610fe7610e3a565b6001600160a01b0316336001600160a01b031614611017576040516282b42960e81b815260040160405180910390fd5b6000611021611df3565b805460018201546040516370a0823160e01b81523060048201529293506001600160a01b039182169291169060009083906370a0823190602401602060405180830381865afa158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c9190615a09565b90508481106110be576110b96001600160a01b0384168387611efd565b611159565b6110d06110cb82876159f6565b611f86565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190615a09565b9050611159826111488784611fea565b6001600160a01b0386169190611efd565b5050505050565b61116c33610b3b611df3565b611188576040516282b42960e81b815260040160405180910390fd5b611190611ffa565b565b61119e33610b3b611df3565b6111ba576040516282b42960e81b815260040160405180910390fd5b6111c3816121dc565b50565b60006111d0610acd565b60090154905090565b6111e1610cb9565b6001600160a01b0316336001600160a01b031614611211576040516282b42960e81b815260040160405180910390fd5b610c2f8161121d611df3565b60050190612209565b6000611230611b1c565b6001600160a01b0316826001600160a01b031614806112675750611252611524565b6001600160a01b0316826001600160a01b0316145b92915050565b61127561221e565b61127e826122ac565b610c2f82826122e4565b60006112926123cc565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000610fcd610acd565b6000610fb1612415565b60006112d5611b1c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190615a09565b600080600061135033610b3b611df3565b61136c576040516282b42960e81b815260040160405180910390fd5b611374612446565b925092509250909192565b6060610d2461138c611df3565b6005016127cd565b600061139e610acd565b600c01546301000000900460ff16919050565b60606113bb611df3565b60070180546113c990615ab3565b80601f01602080910402602001604051908101604052809291908181526020018280546113f590615ab3565b80156114425780601f1061141757610100808354040283529160200191611442565b820191906000526020600020905b81548152906001019060200180831161142557829003601f168201915b5050505050905090565b611454610cb9565b6001600160a01b0316336001600160a01b031614611484576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166114ab5760405163fb7566d760e01b815260040160405180910390fd5b60006114b5610acd565b6006810154604080516001600160a01b03928316815291851660208301529192507fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a160060180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610efa611df3565b6000611538610acd565b600301546001600160a01b0316919050565b6000611554610e3a565b6001600160a01b031663c12d636b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d00573d6000803e3d6000fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156115dc5750825b905060008267ffffffffffffffff1660011480156115f95750303b155b905081158015611607575080155b156116255760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561165957845468ff00000000000000001916680100000000000000001785555b611662886127da565b6001600160a01b0387166116895760405163fb7566d760e01b815260040160405180910390fd5b6040517f1526fe270000000000000000000000000000000000000000000000000000000081526004810187905260009081906001600160a01b038a1690631526fe279060240160c060405180830381865afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190615aed565b5050935050509150611720611b16565b6001600160a01b0316826001600160a01b03161461176a576040517f89e981ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611774612415565b6001810180546001600160a01b03808e166001600160a01b03199283161790925560028301805495909216941693909317909255506003018790555083156117fb57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6000611538611df3565b6000610e44612415565b60006112d56112c1565b61182b610cb9565b6001600160a01b0316336001600160a01b03161461185b576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166118825760405163fb7566d760e01b815260040160405180910390fd5b600061188c611df3565b6003810154604080516001600160a01b03928316815291851660208301529192507f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b9706910160405180910390a160030180546001600160a01b0319166001600160a01b0392909216919091179055565b611903610cb9565b6001600160a01b0316336001600160a01b031614611933576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811661195a5760405163fb7566d760e01b815260040160405180910390fd5b6000611964611df3565b6004810154604080516001600160a01b03928316815291851660208301529192507f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe910160405180910390a160040180546001600160a01b0319166001600160a01b0392909216919091179055565b60606119dd610acd565b600b0180548060200260200160405190810160405280929190818152602001828054801561144257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a16575050505050905090565b6000611a47611819565b611a4f611b1c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab99190615a09565b610d249190615b74565b6000611acd612415565b60030154905090565b6000611ae8611ae3611a3d565b612e73565b611a4f611524565b6000610efa612415565b6000611b04610acd565b600601546001600160a01b0316919050565b6000610d245b6000610e44610acd565b6000611b3433610b3b611df3565b611b50576040516282b42960e81b815260040160405180910390fd5b6000611b5a611df3565b805460048201549192506001600160a01b03908116918116908616821480611b865750611b8686611226565b15611ba45760405163b92ab52360e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0f9190615a09565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038916906370a0823190602401602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190615a09565b90508015611d38576040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015289169063dd62ed3e90604401602060405180830381865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e9190615a09565b811115611d2b57611d2b6001600160a01b038916846000196133fd565b611d368885836134bb565b505b6040516370a0823160e01b815230600482015282906001600160a01b038616906370a0823190602401602060405180830381865afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190615a09565b611dac91906159f6565b955086861015611de8576040517f8edbf6d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505092915050565b60008060ff19610afe60017f2406840ad5584694fd0fd68ca814242285d2c2d94aaaee51ccea0b7e08ea3d5c6159f6565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b80471015611e91576040517fcf479181000000000000000000000000000000000000000000000000000000008152476004820152602481018290526044015b60405180910390fd5b600080836001600160a01b03168360405160006040518083038185875af1925050503d8060008114611edf576040519150601f19603f3d011682016040523d82523d6000602084013e611ee4565b606091505b509150915081611ef757611ef781613570565b50505050565b6040516001600160a01b03838116602483015260448201839052610cb491859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135b2565b6000611e42836001600160a01b03841661363c565b6000611f906112cb565b90506000611f9c611819565b611fa69083615b74565b90506000611fd0611fb683612e73565b611fc08487615b87565b611fca9190615b9e565b83611fea565b905080600003611fe05750505050565b611ef7838261372f565b6000828218828410028218611e42565b6000612004610fa7565b905046600103612080576040516335313c2160e11b81526001600160a01b038216600482015273d061d61a4d941c39e5453435b6345dc261c2fce090636a62784290602401600060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b50505050612188565b6040517f4b9203790000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015273abc000d88f23bb45525e447528dbf656a9d55bf590634b92037990602401602060405180830381865afa1580156120f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121159190615bc0565b15612188576040516335313c2160e11b81526001600160a01b038216600482015273abc000d88f23bb45525e447528dbf656a9d55bf590636a62784290602401600060405180830381600087803b15801561216f57600080fd5b505af1158015612183573d6000803e3d6000fd5b505050505b806001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156121c357600080fd5b505af19250505080156121d4575060015b156111c35750565b6121e58161397d565b6111c36121f061180f565b826121f9611b1c565b6001600160a01b031691906133fd565b6000611e42836001600160a01b038416613c13565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061228e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612282613c62565b6001600160a01b031614155b156111905760405163703e46dd60e11b815260040160405180910390fd5b6122b4610cb9565b6001600160a01b0316336001600160a01b0316146111c3576040516282b42960e81b815260040160405180910390fd5b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561233e575060408051601f3d908101601f1916820190925261233b91810190615a09565b60015b61236657604051634c9c8ce360e01b81526001600160a01b0383166004820152602401611e88565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146123c2576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401611e88565b610cb48383613c8a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111905760405163703e46dd60e11b815260040160405180910390fd5b60008060ff19610afe60017f01191ad2b9c93519c7c8e8e1a3356cfaca04cd0a8d159aa7f8e90f91b5cdf0ef6159f6565b600080600080612454610e3a565b6040517fd53ddc260000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b0383169063d53ddc2690602401602060405180830381865afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db9190615a09565b6040517f9f2b28330000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b03841690639f2b283390602401602060405180830381865afa15801561253e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125629190615a09565b9050600061256e611524565b9050600061257a6112cb565b90506000612586611819565b6125909083615b74565b9050600061259d82612e73565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190615a09565b905060006126198383615b74565b9050868111156126345761262d87826159f6565b9b50612641565b61263e81886159f6565b9a505b600061264d898e615b74565b90508281111561270557600061266384836159f6565b90506000612685866126758985615b87565b61267f9190615b9e565b88611fea565b9050801561270257612697888261372f565b6040516370a0823160e01b81523060048201526001600160a01b038a16906370a0823190602401602060405180830381865afa1580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff9190615a09565b94505b50505b61270f838a611fea565b9a508a831161271f576000612732565b61273261272c8c856159f6565b8e611fea565b6040517f05bed04600000000000000000000000000000000000000000000000000000000815260048101829052602481018e9052604481018d9052909d506001600160a01b038b16906305bed04690606401600060405180830381600087803b15801561279e57600080fd5b505af11580156127b2573d6000803e3d6000fd5b505050506127be613ce0565b50505050505050505050909192565b60606000611e4283613e48565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156128255750825b905060008267ffffffffffffffff1660011480156128425750303b155b905081158015612850575080155b1561286e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156128a257845468ff00000000000000001916680100000000000000001785555b6128bc866000015187602001516001896101200151613ea4565b60408601516001600160a01b031615806128e1575060808601516001600160a01b0316155b806128f7575060e08601516001600160a01b0316155b8061290e57506101008601516001600160a01b0316155b1561292c5760405163fb7566d760e01b815260040160405180910390fd5b60405163124fd3dd60e21b815260076004820152600090735ffe7fb82894076ecb99a30d6a32e969e6e35e989063493f4f7490602401602060405180830381865afa15801561297f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a39190615a22565b60408089015190517f379510490000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291925060009190831690633795104990602401602060405180830381865afa158015612a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a329190615a22565b90506001600160a01b038116612a74576040517f02de52d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408881015190517fdaf297b90000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260009184169063daf297b990602401602060405180830381865afa158015612adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aff9190615a22565b90506001600160a01b038116612b41576040517f1edbf35700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612b4b610acd565b90506000612b62858c604001518d60e0015161408e565b600c8601805460ff1916831515179055600a860183905583519094508490612b9390600b8801906020870190615540565b50505050508a604001518260000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550838260010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828260020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a606001518260030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a608001518260040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a60e001518260050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a61010001518260060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a60c0015182600901819055508a60a0015182600c0160016101000a81548160ff02191690831515021790555081600c0160009054906101000a900460ff1615612d935760608b01516001600160a01b0316612d54576040517fb7fb9bcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608b01516007830180546001600160a01b039283166001600160a01b03199182161790915560408d0151600885018054919093169116179055612dba565b60408b01516007830180546001600160a01b0319166001600160a01b039092169190911790555b808015612dd3575060608b01516001600160a01b031615155b15612e035760608b01516007830180546001600160a01b0319166001600160a01b03909216919091179055612e1b565b600c8201805462ff0000191662010000831515021790555b50505050508315612e6b57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600081600003612e8557506000919050565b60405163124fd3dd60e21b815260076004820152600090735ffe7fb82894076ecb99a30d6a32e969e6e35e989063493f4f7490602401602060405180830381865afa158015612ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc9190615a22565b90506000612f08611524565b90506000612f14610ef0565b60405163940494f160e01b81526001600160a01b03808316600483015291925060009185169063940494f190602401602060405180830381865afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190615a09565b604051639ac90d3d60e01b81526001600160a01b038481166004830152919250600091861690639ac90d3d9060240161010060405180830381865afa158015612fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff59190615bdd565b6040516392e3cc2d60e01b81526001600160a01b0385811660048301529192506000918716906392e3cc2d9060240161010060405180830381865afa158015613042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130669190615c47565b90506000613072611b1c565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d39190615a09565b9050886130de614460565b1561337e57825160009083906130f49084615b87565b6130fe9190615b9e565b855190915061310e908983614476565b613118908b615b74565b995082846001602002015161312d9084615b87565b6131379190615b9e565b60208601516040517fbdf475c30000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529294509091600091908c169063bdf475c390602401602060405180830381865afa1580156131a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c89190615a22565b9050816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322c9190615a09565b60405163940494f160e01b81526001600160a01b038381166004830152919650908c169063940494f190602401602060405180830381865afa158015613276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329a9190615a09565b604051639ac90d3d60e01b81526001600160a01b038381166004830152919950908c1690639ac90d3d9060240161010060405180830381865afa1580156132e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133099190615bdd565b6040516392e3cc2d60e01b81526001600160a01b038381166004830152919850908c16906392e3cc2d9060240161010060405180830381865afa158015613354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133789190615c47565b95505050505b60005b858110156133ef5760008385836008811061339e5761339e615c9e565b60200201516133ad9085615b87565b6133b79190615b9e565b90506133da8683600881106133ce576133ce615c9e565b60200201518a83614476565b6133e4908c615b74565b9a5050600101613381565b505050505050505050919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261347c8482614566565b611ef7576040516001600160a01b038481166024830152600060448301526134b191869182169063095ea7b390606401611f2a565b611ef784826135b2565b60006134c5610fc3565b6040517f6ccb2b010000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015260448201859052600160648301523060848301529190911690636ccb2b019060a4016020604051808303816000875af1158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190615a09565b949350505050565b8051156135805780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080602060008451602086016000885af1806135d5576040513d6000823e3d81fd5b50506000513d915081156135ed5780600114156135fa565b6001600160a01b0384163b155b15611ef7576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611e88565b600081815260018301602052604081205480156137255760006136606001836159f6565b8554909150600090613674906001906159f6565b90508082146136d957600086600001828154811061369457613694615c9e565b90600052602060002001549050808760000184815481106136b7576136b7615c9e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806136ea576136ea615cb4565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611267565b6000915050611267565b818111156137495761374961374483836159f6565b6145b5565b6000613753611524565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561379d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c19190615a09565b905060006137d76137d0611b1c565b8486614476565b905060006137e36119d3565b80519091506137f28187614686565b60005b818110156138c557600083828151811061381157613811615c9e565b60200260200101519050866001600160a01b0316816001600160a01b03160361383a57506138bd565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a59190615a09565b905080156138ba576138b88289836134bb565b505b50505b6001016137f5565b506040516370a0823160e01b8152306004820152839085906001600160a01b038816906370a0823190602401602060405180830381865afa15801561390e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139329190615a09565b61393c91906159f6565b1015613974576040517f850c6f7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b61398681614b47565b6000613990610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b840180548451818402810184019095528085529294936101608601939092830182828015613a7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613a60575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608085019190915263010000009092041615156080909201919091528101519091506001600160a01b031615613b0857613b0881606001518383602001516001600160a01b03166133fd9092919063ffffffff16565b6000613b12610fc3565b61016083015180519192509060005b81811015613b88576000838281518110613b3d57613b3d615c9e565b60200260200101519050613b658588836001600160a01b03166133fd9092919063ffffffff16565b6080860151613b7f906001600160a01b03831690896133fd565b50600101613b21565b50604080850151608086015191517f1d2747d40000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260016024820152911690631d2747d490604401600060405180830381600087803b158015613bf657600080fd5b505af1925050508015613c07575060015b15611159575050505050565b6000818152600183016020526040812054613c5a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611267565b506000611267565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610efa565b613c9382614b72565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115613cd857610cb48282614be9565b610c2f614c5f565b613ce8614c97565b613cf0614c9f565b6000613cfa611b1c565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015613d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d649190615a09565b905080156111c357613d7461180f565b6001600160a01b03166343a0d066613d8a611ac3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915260248101849052600160448201526064016020604051808303816000875af1158015613dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e129190615bc0565b6111c3576040517f3fb65bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081600001805480602002602001604051908101604052809291908181526020018280548015613e9857602002820191906000526020600020905b815481526020019060010190808311613e84575b50505050509050919050565b613eac614d8e565b613eb4614df5565b6001600160a01b0384161580613ed157506001600160a01b038316155b80613ee357506001600160a01b038216155b15613f015760405163fb7566d760e01b815260040160405180910390fd5b6000613f0b611df3565b9050848160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f989190615a22565b81546001600160a01b03199081166001600160a01b03928316178355600283018054909116858316179055604080517f0c340a24000000000000000000000000000000000000000000000000000000008152905191871691630c340a24916004808201926020929091908290030181865afa15801561401b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061403f9190615a22565b6003820180546001600160a01b03199081166001600160a01b0393841617909155600483018054909116918616919091179055600781016140808382615d12565b50612e6b6005820133612209565b606060008060008061409e611524565b6040517f0a700c080000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529192506000918a1690630a700c0890602401602060405180830381865afa158015614103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141279190615a09565b90508067ffffffffffffffff8111156141425761414261566f565b60405190808252806020026020018201604052801561416b578160200160208202803683370190505b506040517fa77576ef0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529197506000918b169063a77576ef9060240161010060405180830381865afa1580156141d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f69190615bdd565b9050600019955060005b828110156142d45781816008811061421a5761421a615c9e565b602002015188828151811061423157614231615c9e565b6001600160a01b039283166020918202929092010152841682826008811061425b5761425b615c9e565b60200201516001600160a01b031614806142c3575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82826008811061429757614297615c9e565b60200201516001600160a01b03161480156142c35750886001600160a01b0316846001600160a01b0316145b156142cc578096505b600101614200565b508186111561430f576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe4d332a90000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528b169063e4d332a990602401602060405180830381865afa15801561436e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143929190615bc0565b94508415801561444a5750604051639ac90d3d60e01b81526001600160a01b038a811660048301528b1690639ac90d3d9060240161010060405180830381865afa1580156143e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144089190615bdd565b866008811061441957614419615c9e565b60200201516001600160a01b031681876008811061443957614439615c9e565b60200201516001600160a01b031614155b1561445457600193505b50505093509350935093565b600061446a610acd565b600c015460ff16919050565b6000826001600160a01b0316846001600160a01b031603614498575080611e42565b6127106144a36111c6565b6144af906127106159f6565b6144b7611afa565b6040517fb64663840000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152878116602483015260448201879052919091169063b646638490606401602060405180830381865afa158015614527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061454b9190615a09565b6145559190615b87565b61455f9190615b9e565b9050611e42565b6000806000806020600086516020880160008a5af192503d915060005190508280156145ab5750811561459c57806001146145ab565b6000866001600160a01b03163b115b9695505050505050565b80156111c3576145c36112c1565b6040517fc32e720200000000000000000000000000000000000000000000000000000000815260048101839052600060248201526001600160a01b03919091169063c32e7202906044016020604051808303816000875af115801561462c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146509190615bc0565b6111c3576040517fcba458bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000614690610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b84018054845181840281018401909552808552929493610160860193909283018282801561477e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614760575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608085019190915263010000009092041615156080909201919091528151908201516101e08301519293509091156147ee576111598385614dfd565b826101a00151156148c05760008567ffffffffffffffff8111156148145761481461566f565b60405190808252806020026020018201604052801561483d578160200160208202803683370190505b506040517fd40ddb8c0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0384169063d40ddb8c906148889088908590600401615e03565b600060405180830381600087803b1580156148a257600080fd5b505af11580156148b6573d6000803e3d6000fd5b5050505050611159565b84600203614978576148d06155a5565b6001600160a01b03821615614944576040516316cd8e2760e21b81526001600160a01b03831690635b36389c9061490d9088908590600401615e1c565b600060405180830381600087803b15801561492757600080fd5b505af115801561493b573d6000803e3d6000fd5b50505050614972565b6040516316cd8e2760e21b81526001600160a01b03841690635b36389c906148889088908590600401615e1c565b50611159565b84600303614a27576149886155c3565b6001600160a01b038216156149e0576040517f8fa892a60000000000000000000000000000000000000000000000000000000081526001600160a01b03831690638fa892a69061490d90869089908690600401615e77565b6040517fecb586a50000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063ecb586a5906148889088908590600401615e9b565b8460040361115957614a376155e1565b6001600160a01b03821615614ac6576040517fad5cc9180000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063ad5cc91890614a8f90869089908690600401615ed2565b600060405180830381600087803b158015614aa957600080fd5b505af1158015614abd573d6000803e3d6000fd5b50505050612e6b565b6040517f7d49d8750000000000000000000000000000000000000000000000000000000081526001600160a01b03841690637d49d87590614b0d9088908590600401615ef6565b600060405180830381600087803b158015614b2757600080fd5b505af1158015614b3b573d6000803e3d6000fd5b50505050505050505050565b6000614b51611df3565b60018101548154919250610c2f916001600160a01b039081169116846133fd565b806001600160a01b03163b600003614ba857604051634c9c8ce360e01b81526001600160a01b0382166004820152602401611e88565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051614c069190615f0a565b600060405180830381855af49150503d8060008114614c41576040519150601f19603f3d011682016040523d82523d6000602084013e614c46565b606091505b5091509150614c56858383614fa2565b95945050505050565b3415611190576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611190615017565b6000614ca9610fa7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015614cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d179190615a09565b90508015610c2f576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015614d7a57600080fd5b505af1158015612e6b573d6000803e3d6000fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16611190576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611190614d8e565b6101408201516060830151600191906001600160a01b031615614eb357606084015184516040517f29ed28620000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101869052600f84900b6044820152606481018590529116906329ed2862906084015b600060405180830381600087803b158015614e9657600080fd5b505af1158015614eaa573d6000803e3d6000fd5b50505050611ef7565b836101c0015115614f1f5783516040517f517a55a300000000000000000000000000000000000000000000000000000000815260048101859052600f83900b602482015260448101849052600160648201526001600160a01b039091169063517a55a390608401614e7c565b83516040517f1a4d01d200000000000000000000000000000000000000000000000000000000815260048101859052600f83900b6024820152604481018490526001600160a01b0390911690631a4d01d290606401600060405180830381600087803b158015614f8e57600080fd5b505af11580156117fb573d6000803e3d6000fd5b606082614fb757614fb282613570565b611e42565b8151158015614fce57506001600160a01b0384163b155b15615010576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611e88565b5080611e42565b6000615021610acd565b604080516102008101825282546001600160a01b0390811682526001840154811660208084019190915260028501548216838501526003850154821660608401526004850154821660808401526005850154821660a08401526006850154821660c08401526007850154821660e084015260088501549091166101008301526009840154610120830152600a840154610140830152600b84018054845181840281018401909552808552929493610160860193909283018282801561510f57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116150f1575b5050509183525050600c919091015460ff8082161515602084015261010082048116151560408401526201000082048116151560608085019190915263010000009092041615156080909201919091529091506000808061516f85615228565b929650909450925090508015615186575050505050565b5083608001516001600160a01b03166326a38e64828660e0015187602001518860400151896101600151518a61016001518a8a8d6101c001518e6101a001518f61010001516040518c63ffffffff1660e01b81526004016151f09a99989796959493929190615f26565b6000604051808303818588803b15801561520957600080fd5b505af115801561521d573d6000803e3d6000fd5b505050505050505050565b60408051600880825261012082019092526060916000918291829182916020820161010080368337505050610160870151519091506000908190600190825b8181101561552f5760008b6101600151828151811061528857615288615c9e565b6020026020010151905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316816001600160a01b0316036154515784156152f7576040517faa49921600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a08c01516040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015615340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153649190615a09565b88848151811061537657615376615c9e565b602002602001018181525050806001600160a01b0316632e1a7d4d8985815181106153a3576153a3615c9e565b60200260200101516040518263ffffffff1660e01b81526004016153c991815260200190565b600060405180830381600087803b1580156153e357600080fd5b505af11580156153f7573d6000803e3d6000fd5b5050505087838151811061540d5761540d615c9e565b6020026020010151955061543f818e602001518a868151811061543257615432615c9e565b6020026020010151614476565b6154499088615b74565b9650506154ff565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015615495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154b99190615a09565b8783815181106154cb576154cb615c9e565b6020026020010181815250506154f2818d6020015189858151811061543257615432615c9e565b6154fc9087615b74565b95505b600087838151811061551357615513615c9e565b6020026020010151111561552657600093505b50600101615267565b509399929850909650945092505050565b828054828255906000526020600020908101928215615595579160200282015b8281111561559557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190615560565b506155a19291506155ff565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b808211156155a15760008155600101615600565b6001600160a01b03811681146111c357600080fd5b803561563481615614565b919050565b60006020828403121561564b57600080fd5b8135611e4281615614565b60006020828403121561566857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156156a9576156a961566f565b60405290565b604051610100810167ffffffffffffffff811182821017156156a9576156a961566f565b600067ffffffffffffffff808411156156ee576156ee61566f565b604051601f8501601f19908116603f011681019082821181831017156157165761571661566f565b8160405280935085815286868601111561572f57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561575c57600080fd5b823561576781615614565b9150602083013567ffffffffffffffff81111561578357600080fd5b8301601f8101851361579457600080fd5b6157a3858235602084016156d3565b9150509250929050565b60008151808452602080850194506020840160005b838110156157e75781516001600160a01b0316875295820195908201906001016157c2565b509495945050505050565b602081526000611e4260208301846157ad565b60005b83811015615820578181015183820152602001615808565b50506000910152565b6020815260008251806020840152615848816040850160208701615805565b601f01601f19169190910160400192915050565b80151581146111c357600080fd5b80356156348161585c565b600082601f83011261588657600080fd5b611e42838335602085016156d3565b6000806000606084860312156158aa57600080fd5b833567ffffffffffffffff808211156158c257600080fd5b9085019061014082880312156158d757600080fd5b6158df615685565b6158e883615629565b81526158f660208401615629565b602082015261590760408401615629565b604082015261591860608401615629565b606082015261592960808401615629565b608082015261593a60a0840161586a565b60a082015260c083013560c082015261595560e08401615629565b60e0820152610100615968818501615629565b90820152610120838101358381111561598057600080fd5b61598c8a828701615875565b8284015250508095505050506159a460208501615629565b9150604084013590509250925092565b600080604083850312156159c757600080fd5b82356159d281615614565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611267576112676159e0565b600060208284031215615a1b57600080fd5b5051919050565b600060208284031215615a3457600080fd5b8151611e4281615614565b60008060008060008060008060006101208a8c031215615a5e57600080fd5b8951615a698161585c565b8099505060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600181811c90821680615ac757607f821691505b602082108103615ae757634e487b7160e01b600052602260045260246000fd5b50919050565b60008060008060008060c08789031215615b0657600080fd5b8651615b1181615614565b6020880151909650615b2281615614565b6040880151909550615b3381615614565b6060880151909450615b4481615614565b6080880151909350615b5581615614565b60a0880151909250615b668161585c565b809150509295509295509295565b80820180821115611267576112676159e0565b8082028115828204841417611267576112676159e0565b600082615bbb57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615bd257600080fd5b8151611e428161585c565b6000610100808385031215615bf157600080fd5b83601f840112615c0057600080fd5b615c086156af565b908301908085831115615c1a57600080fd5b845b83811015615c3d578051615c2f81615614565b835260209283019201615c1c565b5095945050505050565b6000610100808385031215615c5b57600080fd5b83601f840112615c6a57600080fd5b615c726156af565b908301908085831115615c8457600080fd5b845b83811015615c3d578051835260209283019201615c86565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b601f821115610cb4576000816000526020600020601f850160051c81016020861015615cf35750805b601f850160051c820191505b81811015612e6b57828155600101615cff565b815167ffffffffffffffff811115615d2c57615d2c61566f565b615d4081615d3a8454615ab3565b84615cca565b602080601f831160018114615d755760008415615d5d5750858301515b600019600386901b1c1916600185901b178555612e6b565b600085815260208120601f198616915b82811015615da457888601518255948401946001909101908401615d85565b5085821015615dc25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008151808452602080850194506020840160005b838110156157e757815187529582019590820190600101615de7565b8281526040602082015260006135686040830184615dd2565b8281526060810160208083018460005b6002811015615e4957815183529183019190830190600101615e2c565b505050509392505050565b8060005b6003811015611ef7578151845260209384019390910190600101615e58565b6001600160a01b03841681526020810183905260a081016135686040830184615e54565b82815260808101611e426020830184615e54565b8060005b6004811015611ef7578151845260209384019390910190600101615eb3565b6001600160a01b03841681526020810183905260c081016135686040830184615eaf565b82815260a08101611e426020830184615eaf565b60008251615f1c818460208701615805565b9190910192915050565b60006101406001600160a01b03808e168452808d166020850152808c1660408501528a6060850152816080850152615f608285018b6157ad565b915083820360a0850152615f74828a615dd2565b60c085019890985295151560e0840152505091151561010083015290911661012090910152969550505050505056fea2646970667358221220ab698503170b7fa78b26f05d0bd7023e78e408836698f6f52318b5ce6fdd020d64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "keeperAddress_": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "OnlyKeeper: Approve all required tokens"
      },
      "claimRewards()": {
        "details": "This function will only be used when protocol doesn't offer claim by anyone."
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "keeperAddress_": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "fromToken_": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "feeCollector_": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "swapper_": "swapper address"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "params": {
          "amount_": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "onlyGovernor: Add given address in keepers list."
      },
      "claimRewards()": {
        "notice": "OnlyKeeper: Claim rewards from protocol."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "onlyGovernor: Remove given address from keepers list."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "onlyKeeper: sweep given token to feeCollector of strategy"
      },
      "tvl()": {
        "notice": "Returns collateral balance + collateral deposited to curve"
      },
      "updateFeeCollector(address)": {
        "notice": "onlyGovernor: Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "onlyGovernor: Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "onlyPool: Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}