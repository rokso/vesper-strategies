{
  "address": "0x0E4636400B5672c84512968D83103fABE07Bfc08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotSweepToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollectorNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLendingPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReserve",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughAmountOut",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughProfit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TooMuchLoss",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeperAddress_",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "approvalAmount_",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut_",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eToken",
      "outputs": [
        {
          "internalType": "contract IEToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "lendingPool_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimAmountOutMin_",
          "type": "uint256"
        }
      ],
      "name": "migrateReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAccountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minProfit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss_",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimAmountOutMin_",
          "type": "uint256"
        }
      ],
      "name": "refetchRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeperAddress_",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStakingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut_",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken_",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapper",
          "name": "swapper_",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a8c37504b3d73ca6afbcd64750c0df9c941a785e4524435c7061b4b6311d277",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0x0E4636400B5672c84512968D83103fABE07Bfc08",
    "transactionIndex": 48,
    "gasUsed": "3278847",
    "logsBloom": "0x
    "blockHash": "0x1f37cbaef76ab58f851824615e83f037871b1109f6ffedef20e9242a1b7d8dbd",
    "transactionHash": "0x9a8c37504b3d73ca6afbcd64750c0df9c941a785e4524435c7061b4b6311d277",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 138634146,
        "transactionHash": "0x9a8c37504b3d73ca6afbcd64750c0df9c941a785e4524435c7061b4b6311d277",
        "address": "0x0E4636400B5672c84512968D83103fABE07Bfc08",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 308,
        "blockHash": "0x1f37cbaef76ab58f851824615e83f037871b1109f6ffedef20e9242a1b7d8dbd"
      }
    ],
    "blockNumber": 138634146,
    "cumulativeGasUsed": "25580119",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "63ed26d812858149d133de3de58b3df0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotSweepToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollectorNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLendingPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReserve\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmountOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NotEnoughProfit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TooMuchLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeperAddress_\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approvalAmount_\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut_\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eToken\",\"outputs\":[{\"internalType\":\"contract IEToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"lendingPool_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmountOutMin_\",\"type\":\"uint256\"}],\"name\":\"migrateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minProfit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss_\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmountOutMin_\",\"type\":\"uint256\"}],\"name\":\"refetchRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeperAddress_\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut_\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken_\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"swapper_\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"keeperAddress_\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"OnlyKeeper: Approve all required tokens\"},\"claimAndSwapRewards(uint256)\":{\"details\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rebalance(uint256,uint256)\":{\"params\":{\"maxLoss_\":\"Maximum accepted loss for this call.\",\"minProfit_\":\"Minimum profit expected from this call.\"},\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"receiptToken()\":{\"details\":\"override receiptToken as eToken can be updated via migrateReserve function\"},\"removeKeeper(address)\":{\"params\":{\"keeperAddress_\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"fromToken_\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"feeCollector_\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"swapper_\":\"swapper address\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"params\":{\"amount_\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in Extra Finance and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"onlyGovernor: Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"OnlyKeeper: Claim rewards from protocol.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrateReserve(uint256,uint256)\":{\"notice\":\"Migrate funds to another reserve that supports' the same collateral\"},\"rebalance(uint256,uint256)\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"refetchRewardTokens(uint256)\":{\"notice\":\"Rewards token can be updated any time. This method refresh list\"},\"removeKeeper(address)\":{\"notice\":\"onlyGovernor: Remove given address from keepers list.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"onlyKeeper: sweep given token to feeCollector of strategy\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateFeeCollector(address)\":{\"notice\":\"onlyGovernor: Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"onlyGovernor: Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"onlyPool: Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/extra-finance/ExtraFinance.sol\":\"ExtraFinance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/interfaces/extra-finance/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEToken is IERC20 {\\n    function lendingPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x82784ff82c8a677b5ba08436b4223bd017a083ab5826e6c867eba733bddf0443\",\"license\":\"MIT\"},\"contracts/interfaces/extra-finance/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\ninterface ILendingPool {\\n    // Interest Rate Config\\n    // The utilization rate and borrowing rate are expressed in RAY\\n    // utilizationB must gt utilizationA\\n    struct InterestRateConfig {\\n        // The utilization rate a, the end of the first slope on interest rate curve\\n        uint128 utilizationA;\\n        // The borrowing rate at utilization_rate_a\\n        uint128 borrowingRateA;\\n        // The utilization rate a, the end of the first slope on interest rate curve\\n        uint128 utilizationB;\\n        // The borrowing rate at utilization_rate_b\\n        uint128 borrowingRateB;\\n        // the max borrowing rate while the utilization is 100%\\n        uint128 maxBorrowingRate;\\n    }\\n\\n    struct ReserveData {\\n        // variable borrow index.\\n        uint256 borrowingIndex;\\n        // the current borrow rate.\\n        uint256 currentBorrowingRate;\\n        // the total borrows of the reserve at a variable rate. Expressed in the currency decimals\\n        uint256 totalBorrows;\\n        // underlying token address\\n        address underlyingTokenAddress;\\n        // eToken address\\n        address eTokenAddress;\\n        // staking address\\n        address stakingAddress;\\n        // the capacity of the reserve pool\\n        uint256 reserveCapacity;\\n        // borrowing rate config\\n        InterestRateConfig borrowingRateConfig;\\n        // the id of the reserve. Represents the position in the list of the reserves\\n        uint256 id;\\n        uint128 lastUpdateTimestamp;\\n        // reserve fee charged, percent of the borrowing interest that is put into the treasury.\\n        uint16 reserveFeeRate;\\n        Flags flags;\\n    }\\n\\n    struct Flags {\\n        bool isActive; // set to 1 if the reserve is properly configured\\n        bool frozen; // set to 1 if reserve is frozen, only allows repays and withdraws, but not deposits or new borrowings\\n        bool borrowingEnabled; // set to 1 if borrowing is enabled, allow borrowing from this pool\\n    }\\n\\n    function reserves(uint256) external view returns (ReserveData memory);\\n\\n    function utilizationRateOfReserve(uint256 reserveId) external view returns (uint256);\\n\\n    function borrowingRateOfReserve(uint256 reserveId) external view returns (uint256);\\n\\n    function exchangeRateOfReserve(uint256 reserveId) external view returns (uint256);\\n\\n    function totalLiquidityOfReserve(uint256 reserveId) external view returns (uint256 totalLiquidity);\\n\\n    function totalBorrowsOfReserve(uint256 reserveId) external view returns (uint256 totalBorrows);\\n\\n    function getReserveIdOfDebt(uint256 debtId) external view returns (uint256);\\n\\n    struct ReserveStatus {\\n        uint256 reserveId;\\n        address underlyingTokenAddress;\\n        address eTokenAddress;\\n        address stakingAddress;\\n        uint256 totalLiquidity;\\n        uint256 totalBorrows;\\n        uint256 exchangeRate;\\n        uint256 borrowingRate;\\n    }\\n\\n    struct PositionStatus {\\n        uint256 reserveId;\\n        address user;\\n        uint256 eTokenStaked;\\n        uint256 eTokenUnStaked;\\n        uint256 liquidity;\\n    }\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying eTokens.\\n     * - E.g. User deposits 100 USDC and gets in return for specific amount of eUSDC\\n     * the eUSDC amount depends on the exchange rate between USDC and eUSDC\\n     * @param reserveId The ID of the reserve\\n     * @param amount The amount of reserve to be deposited\\n     * @param onBehalfOf The address that will receive the eTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of eTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        uint256 reserveId,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable returns (uint256 eTokenAmount);\\n\\n    function depositAndStake(\\n        uint256 reserveId,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable returns (uint256 eTokenAmount);\\n\\n    function redeem(\\n        uint256 reserveId,\\n        uint256 eTokenAmount,\\n        address to,\\n        bool receiveNativeETH\\n    ) external payable returns (uint256 underlyingTokenAmount);\\n\\n    function unStakeAndWithdraw(\\n        uint256 reserveId,\\n        uint256 eTokenAmount,\\n        address to,\\n        bool receiveNativeETH\\n    ) external payable returns (uint256 underlyingTokenAmount);\\n\\n    function newDebtPosition(uint256 reserveId) external returns (uint256);\\n\\n    function getCurrentDebt(uint256 debtId) external view returns (uint256 currentDebt, uint256 latestBorrowingIndex);\\n\\n    /**\\n     * @dev Allows farming users to borrow a specific `amount` of the reserve underlying asset.\\n     * The user's borrowed tokens is transferred to the vault position contract and is recorded in the user's vault position(VaultPositionManageContract).\\n     * When debt ratio of user's vault position reach the liquidate limit,\\n     * the position will be liquidated and repay his debt(borrowed value + accrued interest)\\n     * @param onBehalfOf The beneficiary of the borrowing, receiving the tokens in his vaultPosition\\n     * @param debtId The debtPositionId\\n     * @param amount The amount to be borrowed\\n     */\\n    function borrow(address onBehalfOf, uint256 debtId, uint256 amount) external;\\n\\n    /**\\n     * @notice Repays borrowed underlying tokens to the reserve pool\\n     * The user's debt is recorded in the vault position(VaultPositionManageContract).\\n     * After this function successfully executed, user's debt should be reduced in VaultPositionManageContract.\\n     * @param onBehalfOf The user who repay debts in his vaultPosition\\n     * @param debtId The debtPositionId\\n     * @param amount The amount to be borrowed\\n     * @return The final amount repaid\\n     **/\\n    function repay(address onBehalfOf, uint256 debtId, uint256 amount) external returns (uint256);\\n\\n    function getUnderlyingTokenAddress(uint256 reserveId) external view returns (address underlyingTokenAddress);\\n\\n    function getETokenAddress(uint256 reserveId) external view returns (address eTokenAddress);\\n\\n    function getStakingAddress(uint256 reserveId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x605f1f8a2c45647f45c01da70641f08aa207c93b125887ed6a69a20daaef44fe\",\"license\":\"MIT\"},\"contracts/interfaces/extra-finance/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingRewards {\\n    event RewardsSet(address rewardsToken, uint256 start, uint256 end, uint256 total);\\n\\n    event Staked(address indexed user, address indexed onBehalfOf, uint256 amount);\\n\\n    event Withdraw(address indexed user, address indexed to, uint256 amount);\\n\\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 claimed);\\n\\n    struct Reward {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n    }\\n\\n    function rewardTokens(uint256) external view returns (address);\\n\\n    function rewardPerToken(address rewardsToken) external view returns (uint256);\\n\\n    function rewardData(address) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function stakedToken() external view returns (IERC20);\\n\\n    function lendingPool() external view returns (address);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function rewardsTokenListLength() external view returns (uint256);\\n\\n    function earned(address _account, address _rewardsToken) external view returns (uint256);\\n\\n    function stake(uint _amount, address onBehalfOf) external;\\n\\n    function withdraw(uint _amount, address to) external;\\n\\n    function withdrawByLendingPool(uint _amount, address user, address to) external;\\n\\n    function claim() external;\\n\\n    function userRewardsClaimable(address _account, address _rewardsToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf52fc935682011fe9195a6ff8ac2e8199abeb09bc4f96e1ddcc74fe6c03a4a2b\",\"license\":\"MIT\"},\"contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(address tokenIn_, address tokenOut_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x961427db4bd5e914add0afb716878acd3f727d6283e3a34e862f79160605203f\",\"license\":\"MIT\"},\"contracts/interfaces/swapper/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\nimport {IMasterOracle} from \\\"contracts/interfaces/one-oracle/IMasterOracle.sol\\\";\\n\\n/**\\n * @notice Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface ISwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0xe679727144c673542dde699697f0d275f9d309f8628937c30082fa17fb8fa75a\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVesperPool} from \\\"./IVesperPool.sol\\\";\\n\\ninterface IStrategy {\\n    function rebalance(\\n        uint256 minProfit_,\\n        uint256 maxLoss_\\n    ) external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function collateralToken() external view returns (IERC20);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function receiptToken() external view returns (address);\\n\\n    function pool() external view returns (IVesperPool);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa2c5b54cd72eb1653341d445835c3721cf355b5514d0815f63ae45417800fe9c\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVesperPool is IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function governor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcabccd7ba4999c2fe756ece18a5bf84e6a4758015f27b6116f61abf268804149\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IStrategy} from \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport {IVesperPool} from \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport {ISwapper} from \\\"../interfaces/swapper/ISwapper.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\nabstract contract Strategy is Initializable, UUPSUpgradeable, IStrategy {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error AddressIsNull();\\n    error CanNotSweepToken();\\n    error FeeCollectorNotSet();\\n    error InvalidStrategy();\\n    error NotEnoughAmountOut();\\n    error NotEnoughProfit(uint256);\\n    error TooMuchLoss(uint256);\\n    error Unauthorized();\\n\\n    event UpdatedFeeCollector(address oldFeeCollector, address newFeeCollector);\\n    event UpdatedSwapper(ISwapper oldSwapper, ISwapper newSwapper);\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n    /// @custom:storage-location erc7201:vesper.storage.Strategy\\n    struct StrategyStorage {\\n        IERC20 _collateralToken;\\n        address _pool;\\n        address _receiptToken;\\n        address _feeCollector;\\n        ISwapper _swapper;\\n        EnumerableSet.AddressSet _keepers;\\n        string _name;\\n    }\\n\\n    bytes32 private constant StrategyStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"vesper.storage.Strategy\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    function _getStrategyStorage() private pure returns (StrategyStorage storage $) {\\n        bytes32 _location = StrategyStorageLocation;\\n        assembly {\\n            $.slot := _location\\n        }\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function __Strategy_init(\\n        address pool_,\\n        address swapper_,\\n        address receiptToken_,\\n        string memory name_\\n    ) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        if (pool_ == address(0) || swapper_ == address(0) || receiptToken_ == address(0)) revert AddressIsNull();\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        $._pool = pool_;\\n        $._collateralToken = IVesperPool(pool_).token();\\n        $._receiptToken = receiptToken_;\\n        // Set pool governor as default feeCollector\\n        $._feeCollector = IVesperPool(pool_).governor();\\n        $._swapper = ISwapper(swapper_);\\n        $._name = name_;\\n        $._keepers.add(msg.sender);\\n    }\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        if (!_getStrategyStorage()._keepers.contains(msg.sender)) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool())) revert Unauthorized();\\n        _;\\n    }\\n\\n    function collateralToken() public view virtual override returns (IERC20) {\\n        return _getStrategyStorage()._collateralToken;\\n    }\\n\\n    function feeCollector() public view returns (address) {\\n        return _getStrategyStorage()._feeCollector;\\n    }\\n\\n    function governor() public view returns (address) {\\n        return pool().governor();\\n    }\\n\\n    function isActive() external view override returns (bool) {\\n        (bool _isActive, , , , , , , , ) = pool().strategy(address(this));\\n        return _isActive;\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view virtual override returns (bool) {\\n        return token_ == receiptToken() || token_ == address(collateralToken());\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _getStrategyStorage()._keepers.values();\\n    }\\n\\n    function NAME() external view returns (string memory) {\\n        return _getStrategyStorage()._name;\\n    }\\n\\n    function pool() public view override returns (IVesperPool) {\\n        return IVesperPool(_getStrategyStorage()._pool);\\n    }\\n\\n    function poolAccountant() external view returns (address) {\\n        return pool().poolAccountant();\\n    }\\n\\n    function receiptToken() public view virtual override returns (address) {\\n        return _getStrategyStorage()._receiptToken;\\n    }\\n\\n    function swapper() public view returns (ISwapper) {\\n        return _getStrategyStorage()._swapper;\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    function VERSION() external pure virtual override returns (string memory) {\\n        return \\\"6.0.1\\\";\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Add given address in keepers list.\\n     * @param keeperAddress_ keeper address to add.\\n     */\\n    function addKeeper(address keeperAddress_) external onlyGovernor {\\n        _getStrategyStorage()._keepers.add(keeperAddress_);\\n    }\\n\\n    /// @dev OnlyKeeper: Approve all required tokens\\n    function approveToken(uint256 approvalAmount_) external onlyKeeper {\\n        _approveToken(approvalAmount_);\\n    }\\n\\n    /// @notice OnlyKeeper: Claim rewards from protocol.\\n    /// @dev Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 minAmountOut_) external onlyKeeper returns (uint256 _amountOut) {\\n        IERC20 _collateralToken = collateralToken();\\n        uint256 _collateralBefore = _collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = _collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        if (_amountOut < minAmountOut_) revert NotEnoughAmountOut();\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @param minProfit_ Minimum profit expected from this call.\\n     * @param maxLoss_ Maximum accepted loss for this call.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance(\\n        uint256 minProfit_,\\n        uint256 maxLoss_\\n    ) external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        (_profit, _loss, _payback) = _rebalance();\\n        if (_profit < minProfit_) revert NotEnoughProfit(_profit);\\n        if (_loss > maxLoss_) revert TooMuchLoss(_loss);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Remove given address from keepers list.\\n     * @param keeperAddress_ keeper address to remove.\\n     */\\n    function removeKeeper(address keeperAddress_) external onlyGovernor {\\n        _getStrategyStorage()._keepers.remove(keeperAddress_);\\n    }\\n\\n    /// @notice onlyKeeper: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 tokenIn_, uint256 minAmountOut_) external onlyKeeper returns (uint256 _amountOut) {\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        IERC20 _collateralToken = $._collateralToken;\\n        address _swapper = address($._swapper);\\n\\n        if (address(tokenIn_) == address(_collateralToken) || isReservedToken(address(tokenIn_)))\\n            revert CanNotSweepToken();\\n        uint256 _collateralBefore = _collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = tokenIn_.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > tokenIn_.allowance(address(this), _swapper)) {\\n                // if needed, forceApprove will set approval to zero before setting new value.\\n                tokenIn_.forceApprove(_swapper, MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(tokenIn_), address(_collateralToken), _amountIn);\\n        }\\n        _amountOut = _collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        if (_amountOut < minAmountOut_) revert NotEnoughAmountOut();\\n    }\\n\\n    /**\\n     * @notice onlyKeeper: sweep given token to feeCollector of strategy\\n     * @param fromToken_ token address to sweep\\n     */\\n    function sweep(address fromToken_) external override onlyKeeper {\\n        address _feeCollector = feeCollector();\\n        if (_feeCollector == address(0)) revert FeeCollectorNotSet();\\n        if (fromToken_ == address(collateralToken()) || isReservedToken(fromToken_)) revert CanNotSweepToken();\\n        if (fromToken_ == ETH) {\\n            Address.sendValue(payable(_feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(fromToken_).balanceOf(address(this));\\n            IERC20(fromToken_).safeTransfer(_feeCollector, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Update fee collector\\n     * @param feeCollector_ fee collector address\\n     */\\n    function updateFeeCollector(address feeCollector_) external onlyGovernor {\\n        if (feeCollector_ == address(0)) revert AddressIsNull();\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        emit UpdatedFeeCollector($._feeCollector, feeCollector_);\\n        $._feeCollector = feeCollector_;\\n    }\\n\\n    /**\\n     * @notice onlyGovernor: Update swapper\\n     * @param swapper_ swapper address\\n     */\\n    function updateSwapper(ISwapper swapper_) external onlyGovernor {\\n        if (address(swapper_) == address(0)) revert AddressIsNull();\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        emit UpdatedSwapper($._swapper, swapper_);\\n        $._swapper = swapper_;\\n    }\\n\\n    /**\\n     * @notice onlyPool: Withdraw collateral token from end protocol.\\n     * @param amount_ Amount of collateral token\\n     */\\n    function withdraw(uint256 amount_) external override onlyPool {\\n        IVesperPool _pool = pool();\\n        // In most cases _token and collateralToken() are same but in case of\\n        // vastETH pool they can be different, stETH and wstETH respectively.\\n        IERC20 _token = _pool.token();\\n        uint256 _tokensHere = _token.balanceOf(address(this));\\n        if (_tokensHere >= amount_) {\\n            _token.safeTransfer(address(_pool), amount_);\\n        } else {\\n            _withdrawHere(amount_ - _tokensHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _tokensHere = _token.balanceOf(address(this));\\n            _token.safeTransfer(address(_pool), Math.min(amount_, _tokensHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual {\\n        StrategyStorage storage $ = _getStrategyStorage();\\n        $._collateralToken.forceApprove($._pool, amount_);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyGovernor {}\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _trySwapExactInput(_rewardToken, address(collateralToken()), _rewardsAmount);\\n        }\\n    }\\n\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper().swapExactInput(tokenIn_, tokenOut_, amountIn_, 1, address(this));\\n    }\\n\\n    function _trySwapExactInput(address tokenIn_, address tokenOut_, uint256 amountIn_) internal returns (uint256) {\\n        try swapper().swapExactInput(tokenIn_, tokenOut_, amountIn_, 1, address(this)) returns (uint256 _amountOut) {\\n            return _amountOut;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _withdrawHere(uint256 amount_) internal virtual;\\n}\\n\",\"keccak256\":\"0x8a4fe9753da7715da07f04d26e0d9d48dfe8a9f071305be2b909b34172d97618\",\"license\":\"MIT\"},\"contracts/strategies/extra-finance/ExtraFinance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Strategy} from \\\"../Strategy.sol\\\";\\nimport {IVesperPool} from \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/extra-finance/ILendingPool.sol\\\";\\nimport {IEToken} from \\\"../../interfaces/extra-finance/IEToken.sol\\\";\\nimport {IStakingRewards} from \\\"../../interfaces/extra-finance/IStakingRewards.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Extra Finance and earn interest.\\ncontract ExtraFinance is Strategy {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IEToken;\\n\\n    error InvalidReserve();\\n    error InvalidLendingPool();\\n    error SlippageTooHigh();\\n\\n    /// @custom:storage-location erc7201:vesper.storage.Strategy.ExtraFinance\\n    struct ExtraFinanceStorage {\\n        ILendingPool _lendingPool;\\n        IStakingRewards _staking;\\n        IEToken _eToken;\\n        uint256 _reserveId;\\n        address[] _rewardTokens;\\n    }\\n\\n    bytes32 private constant ExtraFinanceStorageLocation =\\n        keccak256(abi.encode(uint256(keccak256(\\\"vesper.storage.Strategy.ExtraFinance\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    function _getExtraFinanceStorage() internal pure returns (ExtraFinanceStorage storage $) {\\n        bytes32 _location = ExtraFinanceStorageLocation;\\n        assembly {\\n            $.slot := _location\\n        }\\n    }\\n\\n    function initialize(\\n        address pool_,\\n        address swapper_,\\n        ILendingPool lendingPool_,\\n        uint256 reserveId_,\\n        string memory name_\\n    ) external initializer {\\n        // init require non-zero value for receiptToken hence setting it to 0x1.\\n        // receiptToken is overridden in this contract to return eToken address\\n        __Strategy_init(pool_, swapper_, address(0x1), name_);\\n\\n        if (address(lendingPool_) == address(0)) revert AddressIsNull();\\n        ExtraFinanceStorage storage $ = _getExtraFinanceStorage();\\n        $._lendingPool = lendingPool_;\\n\\n        _setReserve(lendingPool_, reserveId_);\\n    }\\n\\n    function eToken() public view returns (IEToken) {\\n        return _getExtraFinanceStorage()._eToken;\\n    }\\n\\n    function lendingPool() public view returns (ILendingPool) {\\n        return _getExtraFinanceStorage()._lendingPool;\\n    }\\n\\n    /// @dev override receiptToken as eToken can be updated via migrateReserve function\\n    function receiptToken() public view override returns (address) {\\n        return address(eToken());\\n    }\\n\\n    function reserveId() public view returns (uint256) {\\n        return _getExtraFinanceStorage()._reserveId;\\n    }\\n\\n    function rewardTokens() public view returns (address[] memory) {\\n        return _getExtraFinanceStorage()._rewardTokens;\\n    }\\n\\n    function staking() public view returns (IStakingRewards) {\\n        return _getExtraFinanceStorage()._staking;\\n    }\\n\\n    /// @inheritdoc Strategy\\n    function tvl() external view override returns (uint256) {\\n        return collateralToken().balanceOf(address(this)) + _invested();\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 amount_) internal override {\\n        super._approveToken(amount_);\\n\\n        ExtraFinanceStorage memory s = _getExtraFinanceStorage();\\n        collateralToken().forceApprove(address(s._lendingPool), amount_);\\n        s._eToken.forceApprove(address(s._staking), amount_);\\n        s._eToken.forceApprove(address(s._lendingPool), amount_);\\n\\n        address _swapper = address(swapper());\\n        address[] memory _rewardTokens = s._rewardTokens;\\n        uint256 _len = _rewardTokens.length;\\n        for (uint256 i; i < _len; ++i) {\\n            IERC20(_rewardTokens[i]).forceApprove(_swapper, amount_);\\n        }\\n    }\\n\\n    /// @inheritdoc Strategy\\n    function _claimAndSwapRewards() internal override {\\n        // Note: We can only claim all at once\\n        staking().claim();\\n        address _collateralToken = address(collateralToken());\\n        address[] memory _rewardTokens = rewardTokens();\\n        uint256 _len = _rewardTokens.length;\\n        for (uint256 i; i < _len; ++i) {\\n            uint256 _rewardsAmount = IERC20(_rewardTokens[i]).balanceOf(address(this));\\n            if (_rewardsAmount > 0 && _rewardTokens[i] != _collateralToken) {\\n                _trySwapExactInput(_rewardTokens[i], _collateralToken, _rewardsAmount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Convert eToken amount to collateral amount\\n    function _convertToCollateral(uint256 eTokenAmount_) private view returns (uint256 _collateralAmount) {\\n        return (eTokenAmount_ * lendingPool().exchangeRateOfReserve(reserveId())) / 1e18;\\n    }\\n\\n    /// @dev Convert collateral amount to eToken amount\\n    function _convertToReceiptToken(uint256 collateralAmount_) private view returns (uint256 _eTokenAmount) {\\n        return (collateralAmount_ * 1e18) / lendingPool().exchangeRateOfReserve(reserveId());\\n    }\\n\\n    /// @dev Deposit collateral and stake the received eTokens\\n    function _deposit(uint256 amount_) internal {\\n        if (amount_ > 0) {\\n            lendingPool().deposit(reserveId(), amount_, address(this), 0);\\n            uint256 _eTokenBalance = eToken().balanceOf(address(this));\\n            if (_eTokenBalance > 0) {\\n                staking().stake(_eTokenBalance, address(this)); // stake all\\n            }\\n        }\\n    }\\n\\n    /// @dev Fetch reward tokens from the stake contract\\n    function _getRewardTokens() internal view virtual returns (address[] memory _rewardTokens) {\\n        IStakingRewards _staking = staking();\\n        uint256 _len = _staking.rewardsTokenListLength();\\n        _rewardTokens = new address[](_len);\\n        for (uint256 i; i < _len; ++i) {\\n            _rewardTokens[i] = _staking.rewardTokens(i);\\n        }\\n    }\\n\\n    /// @dev Total collateral amount allocated\\n    function _invested() private view returns (uint256) {\\n        return _convertToCollateral(eToken().balanceOf(address(this)) + staking().balanceOf(address(this)));\\n    }\\n\\n    /// @dev Generate report for pools accounting and also send profit and any payback to pool.\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        IVesperPool _pool = pool();\\n        uint256 _excessDebt = _pool.excessDebt(address(this));\\n        uint256 _totalDebt = _pool.totalDebtOf(address(this));\\n\\n        IERC20 _collateralToken = collateralToken();\\n        uint256 _collateralHere = _collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _invested();\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\\n            _collateralHere = _collateralToken.balanceOf(address(this));\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        _pool.reportEarning(_profit, _loss, _payback);\\n\\n        // After reportEarning strategy may get more collateral from pool. Deposit those in ExtraFinance.\\n        _deposit(_collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /// @dev set reserve params of protocol\\n    function _setReserve(ILendingPool lendingPool_, uint256 reserveId_) private {\\n        if (lendingPool_.getUnderlyingTokenAddress(reserveId_) != address(collateralToken())) revert InvalidReserve();\\n\\n        IEToken _eToken = IEToken(lendingPool_.getETokenAddress(reserveId_));\\n        if (address(_eToken) == address(0)) revert AddressIsNull();\\n        if (_eToken.lendingPool() != address(lendingPool_)) revert InvalidLendingPool();\\n\\n        IStakingRewards _staking = IStakingRewards(lendingPool_.getStakingAddress(reserveId_));\\n        if (address(_staking) == address(0)) revert AddressIsNull();\\n\\n        ExtraFinanceStorage storage $ = _getExtraFinanceStorage();\\n        $._reserveId = reserveId_;\\n        $._eToken = _eToken;\\n        $._staking = _staking;\\n        $._rewardTokens = _getRewardTokens();\\n    }\\n\\n    function _unstakeAll() private {\\n        IStakingRewards _staking = staking();\\n        uint256 _staked = _staking.balanceOf(address(this));\\n        if (_staked > 0) {\\n            _staking.withdraw(_staked, address(this));\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 collateralAmount_) internal override {\\n        // Get minimum of requested amount and available collateral\\n        collateralAmount_ = Math.min(\\n            collateralAmount_,\\n            Math.min(_invested(), collateralToken().balanceOf(address(eToken())))\\n        );\\n\\n        uint256 _eTokenAmount = _convertToReceiptToken(collateralAmount_);\\n        uint256 _eTokenBalance = eToken().balanceOf(address(this));\\n\\n        if (_eTokenAmount > _eTokenBalance) {\\n            uint256 _unstakeAmount = _eTokenAmount - _eTokenBalance;\\n            staking().withdraw(_unstakeAmount, address(this));\\n            _eTokenBalance = eToken().balanceOf(address(this));\\n        }\\n\\n        if (_eTokenAmount > 0) {\\n            lendingPool().redeem(reserveId(), Math.min(_eTokenAmount, _eTokenBalance), address(this), false);\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    /// @notice Migrate funds to another reserve that supports' the same collateral\\n    function migrateReserve(uint256 newReserveId_, uint256 claimAmountOutMin_) external onlyGovernor {\\n        // 1. Claim rewards from current staking contract\\n        IERC20 _collateralToken = collateralToken();\\n        uint256 _before = _collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        if (_collateralToken.balanceOf(address(this)) - _before < claimAmountOutMin_) revert SlippageTooHigh();\\n\\n        // 2. Withdraw all collateral\\n        // Note: Do not use `_withdrawHere` in order to make it reverts if available liquidity isn't enough\\n        _unstakeAll();\\n        ILendingPool _lendingPool = lendingPool();\\n        _lendingPool.redeem(reserveId(), eToken().balanceOf(address(this)), address(this), false);\\n\\n        // 3. Setup the new reserve\\n        _setReserve(_lendingPool, newReserveId_);\\n\\n        // 4. Setup required approvals\\n        _approveToken(MAX_UINT_VALUE);\\n\\n        // 5. Deposit all collateral to the new reserve\\n        _deposit(_collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Rewards token can be updated any time. This method refresh list\\n    function refetchRewardTokens(uint256 claimAmountOutMin_) external virtual onlyGovernor {\\n        // Claim rewards before updating the reward list.\\n        IERC20 _collateralToken = collateralToken();\\n        uint256 _before = _collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        if (_collateralToken.balanceOf(address(this)) - _before < claimAmountOutMin_) revert SlippageTooHigh();\\n        _getExtraFinanceStorage()._rewardTokens = _getRewardTokens();\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n}\\n\",\"keccak256\":\"0x0bbd755e52d78fc63c1b6df72dc900dbe01d93e67467bb3a43199e5308cc2297\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523460c857306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c1660b957506001600160401b036002600160401b0319828216016075575b604051613a0c90816100ce82396080518181816118c701526119920152f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a13880806056565b63f92ee8a960e01b8152600490fd5b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806301681a62146121535780630c340a24146121275780631026013a1461201657806314ae9f2e14611fcc57806316f0115b14611fa757806322f3e2d414611ef25780632b3297f914611ecd5780632e1a7d4d14611d5b5780633ac9fc1114611c3b5780634032b72b14611bf1578063440d724814611bc35780634cf088d914611b9e5780634f1ef2861461194157806352d1902d146118ac5780636557ef67146117025780636cfa2a8214611293578063951dc22c14611230578063953d9cf1146109ad578063a3f4df7e14611169578063a59a997314611146578063ad3cb1cc146110f0578063b2016bd4146110c3578063c12d636b14611023578063c2b18aa014610ff0578063c415b95c14610fcb578063d2c35ce814610f2e578063d3033c3914610e8f578063df8879b814610aa1578063e5328e0614610a04578063ea8d1f0a146109dd578063ec78e832146109ad578063ee330ee31461059d578063fa24c171146101ef5763ffa1ad741461019357600080fd5b346101ec57806003193601126101ec576101e86040516101b281612337565b600581527f362e302e31000000000000000000000000000000000000000000000000000000602082015260405191829182612429565b0390f35b80fd5b50346101ec576101fe36612472565b906001600160a01b03806102106124a7565b1633036105735780610220612624565b541692604051926370a0823160e01b9182855230600486015260209485816024818a5afa90811561043f578891610546575b5061025b612715565b6040519084825230600483015286826024818b5afa801561053b57899061050c575b610287925061250d565b106104e25785836001610298612ce3565b015416604051908482523060048301528682602481845afa9182156103ca5783926104b0575b508161044a575b505050826102d1612ce3565b541660248560036102e0612ce3565b01549560026102ed612ce3565b015416604051928380928882523060048301525afa801561043f578691899161040e575b50604051631a42a82760e31b815260048101969096526024860152306044860152600060648601528480608481015b03818a855af19384156104035785946103d5575b509061035f91612e86565b610367612bec565b60246040518095819382523060048301525afa9081156103ca578391610395575b8361039283613493565b80f35b905081813d83116103c3575b6103ab818361236f565b810103126103be57610392905138610388565b600080fd5b503d6103a1565b6040513d85823e3d90fd5b849192943d83116103fc575b6103eb818361236f565b810103126103be5791839238610354565b503d6103e1565b6040513d89823e3d90fd5b82819392503d8311610438575b610425818361236f565b810103126103be57518590610340610311565b503d61041b565b6040513d8a823e3d90fd5b803b156104ac57604051627b8a6760e11b8152600481019290925230602483015282908290604490829084905af180156104a157610489575b806102c5565b610492906122f1565b61049d578538610483565b8580fd5b6040513d84823e3d90fd5b8280fd5b925090508582813d81116104db575b6104c9818361236f565b810103126103be5787915190386102be565b503d6104bf565b60046040517f850c6f76000000000000000000000000000000000000000000000000000000008152fd5b508682813d8311610534575b610522818361236f565b810103126103be57610287915161027d565b503d610518565b6040513d8b823e3d90fd5b90508581813d831161056c575b61055d818361236f565b810103126103be575138610252565b503d610553565b60046040517f82b42900000000000000000000000000000000000000000000000000000000008152fd5b50346101ec5760403660031901126101ec576001600160a01b03906004358281168082036104ac576024926105ed60056105d5612624565b01339060019160005201602052604060002054151590565b15610573576105fa612624565b92856004818654169501541690848414801561099e575b61097457604051936370a0823160e01b9283865230600487015260209889878a818b5afa96871561096957869761093a575b50604051918583523060048401528a838b81875afa92831561040357908b9695949392918893610909575b5082610718575b5050505050856040518096819382523060048301525afa90811561070c57906106dd575b6106a3925061250d565b903581106106b357604051908152f35b60046040517f8edbf6d8000000000000000000000000000000000000000000000000000000008152fd5b508382813d8311610705575b6106f3818361236f565b810103126103be576106a39151610699565b503d6106e9565b604051903d90823e3d90fd5b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821660248201529596509394929391929091908b81604481885afa90811561043f57908c959493929189916108d6575b50956107e696841161082d575b50506004610795612624565b0154604051636ccb2b0160e01b81526001600160a01b039485166004820152938a166024850152604484019290925260016064840152306084840152919384929091169082908790829060a4820190565b03925af180156103ca57908791610804575b80808080959495610675565b813d8311610826575b610817818361236f565b810103126103be5785386107f8565b503d61080d565b604051908c87830188600063095ea7b360e01b928381528785880152811960448801526044875261085d87612353565b86519082875af16000513d826108ba575b50501561087e575b505050610789565b6108b0946108ab92604051928b84015282015260006044820152604481526108a581612353565b8261363d565b61363d565b3880808c81610876565b9091506108ce5750873b15155b388061086e565b6001146108c7565b86819792503d8311610902575b6108ed818361236f565b810103126103be5793518b94906107e661077c565b503d6108e3565b8781989294503d8311610933575b610921818361236f565b810103126103be578a9551913861066e565b503d610917565b9096508981813d8311610962575b610952818361236f565b810103126103be57519538610643565b503d610948565b6040513d88823e3d90fd5b60046040517fb92ab523000000000000000000000000000000000000000000000000000000008152fd5b506109a884612530565b610611565b50346101ec57806003193601126101ec5760206001600160a01b0360026109d2612ce3565b015416604051908152f35b50346101ec57806003193601126101ec57602060036109fa612ce3565b0154604051908152f35b50346101ec57806003193601126101ec57602460206001600160a01b03610a29612624565b5416604051928380926370a0823160e01b82523060048301525afa91821561070c5791610a6d575b6020610a6583610a5f613193565b90612617565b604051908152f35b90506020813d602011610a99575b81610a886020938361236f565b810103126103be5751610a65610a51565b3d9150610a7b565b50346101ec57610ab036612472565b9190610abf60056105d5612624565b1561057357819082936001600160a01b0391826001610adc612624565b01541694604051907fd53ddc260000000000000000000000000000000000000000000000000000000082523060048301526020602495818488818c5afa9384156103ca578394610e60575b50604051907f9f2b2833000000000000000000000000000000000000000000000000000000008252306004830152828289818d5afa918215610d5c578492610e31575b50610b73612624565b541693604051906370a0823160e01b9283835230600484015284838b818a5afa928315610969578693610e02575b50829a610bb5610baf613193565b85612617565b9082821115610df0575090610bc99161250d565b915b610bd58284612617565b818111610d75575b5050898118818b100218988980821115610d6b57610bfa9161250d565b8180821091180218985b803b15610d67576040517f05bed046000000000000000000000000000000000000000000000000000000008152600481018b9052602481018c9052604481018a90529084908290606490829084905af18015610d5c57610d49575b508190876040518096819382523060048301525afa91821561070c5791610d19575b50610c8c9150613493565b8410610ce9578411610cba57506101e890604051938493846040919493926060820195825260208201520152565b83604051907fbfa80dbe0000000000000000000000000000000000000000000000000000000082526004820152fd5b5082604051907fcc71aff40000000000000000000000000000000000000000000000000000000082526004820152fd5b905081813d8311610d42575b610d2f818361236f565b810103126103be57610c8c905138610c81565b503d610d25565b92610d558392946122f1565b9290610c5f565b6040513d86823e3d90fd5b8380fd5b5050508298610c04565b610d8a929b5090610d859161250d565b61287e565b60405182815230600482015283818a81895afa908115610de5578591610db4575b50983880610bdd565b90508381813d8311610dde575b610dcb818361236f565b81010312610dda575138610dab565b8480fd5b503d610dc1565b6040513d87823e3d90fd5b939d50610dfc9161250d565b9b610bcb565b9092508481813d8311610e2a575b610e1a818361236f565b8101031261049d57519138610ba1565b503d610e10565b9091508281813d8311610e59575b610e49818361236f565b81010312610d6757519038610b6a565b503d610e3f565b9093508181813d8311610e88575b610e78818361236f565b810103126104ac57519238610b27565b503d610e6e565b50346101ec5760203660031901126101ec576004356001600160a01b03908181168091036104ac5781610ec06124a7565b163303610573578015610f1d576001600160a01b03196004610ee0612624565b01927f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe604085549281519084168152856020820152a11617905580f35b600460405163fb7566d760e01b8152fd5b50346101ec5760203660031901126101ec57610f486122db565b6001600160a01b0380610f596124a7565b16330361057357808216908115610f1d576001600160a01b0319907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b97066003610f9f612624565b018054604080519482166001600160a01b03908116865297909716602085015290959092a11617905580f35b50346101ec57806003193601126101ec5760206001600160a01b0360036109d2612624565b50346101ec57806003193601126101ec576101e86110176004611011612ce3565b016125bb565b604051918291826123e4565b50346101ec57806003193601126101ec5760046001600160a01b03602081600161104b612624565b015416604051938480927fc12d636b0000000000000000000000000000000000000000000000000000000082525afa9182156103ca5760209392611094575b5060405191168152f35b6110b5919250833d85116110bc575b6110ad818361236f565b810190612488565b903861108a565b503d6110a3565b50346101ec57806003193601126101ec5760206001600160a01b036110e6612624565b5416604051908152f35b50346101ec57806003193601126101ec576101e860405161111081612337565b600581527f352e302e30000000000000000000000000000000000000000000000000000000602082015260405191829182612429565b50346101ec57806003193601126101ec5760206001600160a01b036110e6612ce3565b50346101ec57806003193601126101ec576007611184612624565b016040519082815461119581612581565b9182855260209360019260018116908160001461120c57506001146111d1575b6101e8866111c5818a038261236f565b60405191829182612429565b9080949650528483205b8284106111f957505050816101e8936111c5928201019338806111b5565b80548585018701529285019281016111db565b60ff19168787015250505050151560051b82010191506111c5816101e838806111b5565b50346101ec57806003193601126101ec57600561124b612624565b604051910180548083529083526020808420818401949092915b82821061127c576101e8856110178189038261236f565b835486529485019460019384019390910190611265565b50346101ec5760a03660031901126101ec576112ad6122db565b6024356001600160a01b03811681036104ac576001600160a01b0360443516604435036104ac5760843567ffffffffffffffff8111610d675736602382011215610d67576113059036906024816004013591016123ad565b917ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549267ffffffffffffffff8416801590816116f2575b60011490816116e8575b1590816116df575b506116b557600167ffffffffffffffff19851617855560ff8460401c1615611696575b61137c61391e565b61138461391e565b6001600160a01b038316158015611685575b801561167e575b610f1d576113a9612624565b92600184016001600160a01b0382166001600160a01b031982541617905560405190637e062a3560e11b82526020826004816001600160a01b0385165afa90811561043f576001600160a01b0360209281948b91611661575b50166001600160a01b03198754161786556002860160016001600160a01b031982541617905560046040518094819363030d028960e21b8352165afa908115610403578791611642575b506001600160a01b036003850191166001600160a01b03198254161790556001600160a01b036004840191166001600160a01b0319825416179055600782019080519067ffffffffffffffff821161162e576114a88354612581565b601f81116115f3575b50602090601f831160011461158a576114ee9493929188918361157f575b50508160011b916000199060031b1c19161790555b60053391016138c2565b506001600160a01b036044351615610f1d5760ff9061150b612ce3565b6001600160a01b03604435166001600160a01b0319825416179055611534606435604435612e86565b60401c1615611541575080f35b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b0151905038806114cf565b838852602088209190601f198416895b8181106115db57509160019391856114ee98979694106115c2575b505050811b0190556114e4565b015160001960f88460031b161c191690553880806115b5565b9293602060018192878601518155019501930161159a565b61161e9084895260208920601f850160051c81019160208610611624575b601f0160051c019061256a565b386114b1565b9091508190611611565b602487634e487b7160e01b81526041600452fd5b61165b915060203d6020116110bc576110ad818361236f565b3861144c565b6116789150843d86116110bc576110ad818361236f565b38611402565b508561139d565b506001600160a01b03811615611396565b68ffffffffffffffffff19841668010000000000000001178555611374565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b90501538611351565b303b159150611349565b604086901c60ff1615915061133f565b50346101ec576020806003193601126118a8576001600160a01b0390816117276124a7565b1633036105735781611737612624565b54166040516370a0823160e01b908181523060048201528381602481865afa9182156109695784918793611877575b5061176f612715565b60246040518095819382523060048301525afa918215610de5578592611846575b5061179e906004359261250d565b106104e2576117ab612d32565b9160046117b6612ce3565b019183519367ffffffffffffffff8511611832576801000000000000000085116118325781908454868655808710611818575b500192855280852091855b8581106118045786610392612bec565b8451821684820155938201936001016117f4565b85885282882061182c91810190880161256a565b386117e9565b602486634e487b7160e01b81526041600452fd5b9091508281813d8311611870575b61185e818361236f565b81010312610dda57519061179e611790565b503d611854565b8281939294503d83116118a1575b61188f818361236f565b8101031261049d578390519138611766565b503d611885565b5080fd5b50346101ec57806003193601126101ec576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119175760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60046040517fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b5060403660031901126101ec576119566122db565b60243567ffffffffffffffff81116104ac57366023820112156104ac576119879036906024816004013591016123ad565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016803014908115611b70575b5061191757806119cb6124a7565b163303610573578216916040517f52d1902d000000000000000000000000000000000000000000000000000000008152602081600481875afa859181611b3c575b50611a295760248460405190634c9c8ce360e01b82526004820152fd5b9284937f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90818103611b0b5750823b15611af35780546001600160a01b0319168217905560405184917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2835115611abe575080836020611aba95519101845af4611ab46126bb565b91613977565b5080f35b9250505034611acb575080f35b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b60248260405190634c9c8ce360e01b82526004820152fd5b602490604051907faa1d49a40000000000000000000000000000000000000000000000000000000082526004820152fd5b9091506020813d602011611b68575b81611b586020938361236f565b8101031261049d57519038611a0c565b3d9150611b4b565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54161415386119bd565b50346101ec57806003193601126101ec5760206001600160a01b0360016109d2612ce3565b50346101ec5760203660031901126101ec576020611be7611be26122db565b612530565b6040519015158152f35b50346101ec5760203660031901126101ec57611c0b6122db565b6001600160a01b039081611c1d6124a7565b16330361057357611aba916005611c32612624565b019116906138c2565b50346101ec5760203660031901126101ec57600435611c5d60056105d5612624565b1561057357611c6a612624565b906001600160a01b0390611c8a81838554168460018097015416906133d1565b611c92612ce3565b611d1b82604051611ca28161231b565b8584541681528580806001870154169560208401968752611d1085611ce16004856002860154169460408901958652600381015460608a0152016125bb565b9860808701998a52611d028286611cf6612624565b5416878a5116906133d1565b8480855116915116906133d1565b5116915116906133d1565b826004611d26612624565b015416905192835193865b858110611d3c578780f35b80611d55868686611d4e8c96886126eb565b51166133d1565b01611d31565b50346101ec576020806003193601126118a8576004356001600160a01b03806001611d84612624565b015416330361057357806001611d98612624565b0154169060405190637e062a3560e11b82528482600481865afa918215610969578692611eae575b508116604051946370a0823160e01b8087523060048801528187602481865afa96871561043f578897611e7b575b50858710611e03575050506103929350612666565b611e14610d8587949884969861250d565b60246040518098819382523060048301525afa918215610969578692611e49575b506103929450818082109118021891612666565b90915084813d8311611e74575b611e60818361236f565b81010312610dda5761039293519038611e35565b503d611e56565b9096508181813d8311611ea7575b611e93818361236f565b81010312611ea357519538611dee565b8780fd5b503d611e89565b611ec6919250853d87116110bc576110ad818361236f565b9038611dc0565b50346101ec57806003193601126101ec5760206001600160a01b0360046109d2612624565b50346101ec57806003193601126101ec576001600160a01b036001611f15612624565b01541660405180917f228bfd9f0000000000000000000000000000000000000000000000000000000082523060048301528160246101209485935afa9182156103ca578392611f6c575b6020836040519015158152f35b90809250813d8311611fa0575b611f83818361236f565b810103126118a8575180151581036118a857602091503880611f5f565b503d611f79565b50346101ec57806003193601126101ec5760206001600160a01b0360016109d2612624565b50346101ec5760203660031901126101ec57611fe66122db565b6001600160a01b039081611ff86124a7565b16330361057357611aba91600561200d612624565b019116906137bb565b50346101ec576020806003193601126118a85761203660056105d5612624565b15610573576001600160a01b0361204b612624565b5416604051906370a0823160e01b918281523060048201528381602481855afa928315610de557849186946120f6575b50612084612715565b60246040518094819382523060048301525afa908115610d5c5784916120c2575b506120b192935061250d565b60043581106106b357604051908152f35b90508281813d83116120ef575b6120d9818361236f565b81010312610d67576120b19293505183926120a5565b503d6120cf565b8281939295503d8311612120575b61210e818361236f565b81010312610dda57839051923861207b565b503d612104565b50346101ec57806003193601126101ec5760206121426124a7565b6001600160a01b0360405191168152f35b50346101ec5760203660031901126101ec5761216d6122db565b61217a60056105d5612624565b15610573576001600160a01b03806003612192612624565b0154169182156122b157816121a5612624565b54169181169182149081156122a1575b506109745773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103612236575047908147106121fe578280809381935af16121ef6126bb565b90156121f9575080f35b6136b1565b6044824790604051917fcf47918100000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b604051916370a0823160e01b8352306004840152602083602481855afa918215610d5c57849261226b575b6103929350612666565b91506020833d602011612299575b816122866020938361236f565b81010312610d6757610392925191612261565b3d9150612279565b6122ab9150612530565b386121b5565b60046040517fb4b53f42000000000000000000000000000000000000000000000000000000008152fd5b600435906001600160a01b03821682036103be57565b67ffffffffffffffff811161230557604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761230557604052565b6040810190811067ffffffffffffffff82111761230557604052565b6080810190811067ffffffffffffffff82111761230557604052565b90601f8019910116810190811067ffffffffffffffff82111761230557604052565b67ffffffffffffffff811161230557601f01601f191660200190565b9291926123b982612391565b916123c7604051938461236f565b8294818452818301116103be578281602093846000960137010152565b602090602060408183019282815285518094520193019160005b82811061240c575050505090565b83516001600160a01b0316855293810193928101926001016123fe565b6020808252825181830181905290939260005b82811061245e57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161243c565b60409060031901126103be576004359060243590565b908160209103126103be57516001600160a01b03811681036103be5790565b600460206001600160a01b0360016124bd612624565b0154166040519283809263030d028960e21b82525afa908115612501576000916124e5575090565b6124fe915060203d6020116110bc576110ad818361236f565b90565b6040513d6000823e3d90fd5b9190820391821161251a57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081806002612545612ce3565b015416911690811491821561255957505090565b909150612564612624565b54161490565b818110612575575050565b6000815560010161256a565b90600182811c921680156125b1575b602083101461259b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612590565b90604051918281549182825260209260208301916000526020600020936000905b8282106125f4575050506125f29250038361236f565b565b85546001600160a01b0316845260019586019588955093810193909101906125dc565b9190820180921161251a57565b604051602081017f2406840ad5584694fd0fd68ca814242285d2c2d94aaaee51ccea0b7e08ea3d5b81526020825261265b82612337565b9051902060ff191690565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039290921660248301526044808301939093529181526125f2916108ab60648361236f565b3d156126e6573d906126cc82612391565b916126da604051938461236f565b82523d6000602084013e565b606090565b80518210156126ff5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b600180612720612ce3565b01906000916001600160a01b038091541690813b15610d67576040906040517f4e71d92d00000000000000000000000000000000000000000000000000000000815285816004818382985af180156109695761286b575b5080612781612624565b5416906127916004611011612ce3565b805194875b8681106127a857505050505050505050565b836127b382856126eb565b5116865180916370a0823160e01b8252308583015281602460209485935afa91821561286157908a9392918c92612830575b50508015158061281a575b6127fc575b5001612796565b61281390878761280c85896126eb565b51166136ea565b50386127f5565b50868661282784886126eb565b511614156127f0565b8194508092503d831161285a575b612848818361236f565b810103126103be5788915138806127e5565b503d61283e565b88513d8d823e3d90fd5b612877909591956122f1565b9338612777565b612886613193565b61288e612624565b9060006001600160a01b0380935416928060026128a9612ce3565b0154166040938451968780926370a0823160e01b988983526004958684015260209a8b9160249687915afa918215612be2578792612bb3575b50818082109118021890818082109118029081811891670de0b6b3a76400008084029384041491141715612ba15783612919612ce3565b541690886003612927612ce3565b0154848951809581936337e2beb760e21b8352898301525afa918215612b23578692612b72575b508115612b60570495819088856002612965612ce3565b01541688519485809285825230898301525afa928315612b23578693612b31575b5082808911612a47575b505050856129a2575b50505050505050565b86926129ac612ce3565b5416908460036129ba612ce3565b01548751631a42a82760e31b815294850190815288831898831198909802909118602088015230604088015260006060880152919586928391829060800103925af1918215612a3d575050612a14575b8080808080612999565b813d8311612a36575b612a27818361236f565b810103126103be573880612a0a565b503d612a1d565b51903d90823e3d90fd5b612a54919293508861250d565b846001612a5f612ce3565b01541690813b15612b2d578751627b8a6760e11b815285810191825230602083015291879183919082908490829060400103925af18015612b235790899291612b10575b50846002612aaf612ce3565b01541692875180948193825230878301525afa908115612b06578491612ad9575b50388080612990565b90508681813d8311612aff575b612af0818361236f565b810103126103be575138612ad0565b503d612ae6565b85513d86823e3d90fd5b612b1c909691966122f1565b9438612aa3565b87513d88823e3d90fd5b8680fd5b9092508881813d8311612b59575b612b49818361236f565b8101031261049d57519138612986565b503d612b3f565b8286601286634e487b7160e01b835252fd5b9091508881813d8311612b9a575b612b8a818361236f565b8101031261049d5751903861294e565b503d612b80565b5083601183634e487b7160e01b835252fd5b9091508981813d8311612bdb575b612bcb818361236f565b81010312612b2d575190386128e2565b503d612bc1565b88513d89823e3d90fd5b612bf4612624565b6001600160a01b03612c118183541682600180950154169061331d565b612c19612ce3565b612c9f604051612c288161231b565b8383541681528380806001860154169460208401958652612c94612c66600484600285015416936040880194855260038101546060890152016125bb565b9660808601978852612c8684612c7a612624565b5416858851169061331d565b83808451169151169061331d565b51169151169061331d565b816004612caa612624565b01541690519182519260005b848110612cc557505050505050565b80612cdd8585612cd68a95876126eb565b511661331d565b01612cb6565b604051602081017f4d9eed546e4705919557215ec319fca3fd5305ca57b19dffaf31b2484c6f5f6a81526020825261265b82612337565b67ffffffffffffffff81116123055760051b60200190565b6001600160a01b03906001826001612d48612ce3565b0154169260408051917f8de4e99000000000000000000000000000000000000000000000000000000000835260206004968185600481845afa94851561250157600095612e57575b50612d9a85612d1a565b91612da8604051938461236f565b858352601f19612db787612d1a565b013682850137829860005b878110612dd457505050505050505050565b86517f7bb7bed100000000000000000000000000000000000000000000000000000000815281838201528381602481885afa908115612e4c57908a9291600091612e2f575b5087612e2583896126eb565b9116905201612dc2565b612e469150853d87116110bc576110ad818361236f565b38612e19565b88513d6000823e3d90fd5b90948282813d8311612e7f575b612e6e818361236f565b810103126101ec5750519338612d90565b503d612e64565b906001600160a01b038092169060409283517fdd57691100000000000000000000000000000000000000000000000000000000815260049383858301526020918281602481855afa9081156130d257600091613176575b508380612ee8612624565b541691160361314e5785517f5401889600000000000000000000000000000000000000000000000000000000815284868201528281602481855afa9081156130d257908491600091613131575b50169081156131225786517fa59a997300000000000000000000000000000000000000000000000000000000815283818881865afa908115612e4c5782918691600091613105575b5016036130dd57826024918851928380927f5c6b6782000000000000000000000000000000000000000000000000000000008252898b8301525afa9081156130d2579084916000916130b5575b50169586156130a65750612fdc612ce3565b936003850155600284016001600160a01b0319918282541617905560019560018501918254161790558361300e612d32565b93019280519467ffffffffffffffff861161309157680100000000000000008611613091575081908454868655808710613074575b500192600052806000209160005b8581106130615750505050505050565b8451821684820155938201938601613051565b61308b90866000528784600020918201910161256a565b38613043565b604190634e487b7160e01b6000525260246000fd5b85905163fb7566d760e01b8152fd5b6130cc9150843d86116110bc576110ad818361236f565b38612fca565b87513d6000823e3d90fd5b8587517fd8cad676000000000000000000000000000000000000000000000000000000008152fd5b61311c9150863d88116110bc576110ad818361236f565b38612f7d565b85875163fb7566d760e01b8152fd5b6131489150843d86116110bc576110ad818361236f565b38612f35565b8486517fe46aea09000000000000000000000000000000000000000000000000000000008152fd5b61318d9150833d85116110bc576110ad818361236f565b38612edd565b6001600160a01b038060026131a6612ce3565b01541690604091825190816370a0823160e01b9182825230600483015281602460209586935afa9081156132e5576000916132f0575b50828460016131e9612ce3565b01541692602487518095819382523060048301525afa9081156132e5576000916132b4575b6132189250612617565b91613221612ce3565b54169080600361322f612ce3565b015460248651809581936337e2beb760e21b835260048301525afa9384156132aa575060009361327a575b505081810291818304149015171561251a57670de0b6b3a7640000900490565b9080929350813d83116132a3575b613292818361236f565b810103126103be575190388061325a565b503d613288565b513d6000823e3d90fd5b90508282813d83116132de575b6132cb818361236f565b810103126103be5761321891519061320e565b503d6132c1565b85513d6000823e3d90fd5b90508281813d8311613316575b613307818361236f565b810103126103be5751386131dc565b503d6132fd565b604051906020820163095ea7b360e01b93848252602060006001600160a01b0380931693846024880152811960448801526044875261335b87612353565b86519082875af1903d60005190836133b0575b5050501561337d575b50505050565b6133a7936108ab91604051916020830152602482015260006044820152604481526108a581612353565b38808080613377565b919250906133c7575082163b15155b38808061336e565b60019150146133bf565b604051916020600081850161341d8661340f63095ea7b360e01b998a85528760248401602090939291936001600160a01b0360408201951681520152565b03601f19810188528761236f565b85519082865af16000513d8261346e575b50501561343b5750505050565b6133a7936001600160a01b036108ab9260405192602084015216602482015260006044820152604481526108a581612353565b90915061348b57506001600160a01b0382163b15155b388061342e565b600114613484565b8061349b5750565b6001600160a01b0390816134ad612ce3565b541660036134b9612ce3565b0154926040928351947f1de8a7c20000000000000000000000000000000000000000000000000000000086526004860152602485015230604485015260009384928360648301528160848160209687945af1801561360a57908391613614575b50602490826002613528612ce3565b0154168551928380926370a0823160e01b82523060048301525afa92831561360a5785936135da575b50508161355e5750505050565b6001613568612ce3565b01541690813b15610d675782517f7acb77570000000000000000000000000000000000000000000000000000000081526004810191909152306024820152929081908490604490829084905af1918215612a3d5750506135cb575b808080613377565b6135d4906122f1565b386135c3565b9080929350813d8311613603575b6135f2818361236f565b81010312610d675751903880613551565b503d6135e8565b84513d87823e3d90fd5b813d8311613636575b613627818361236f565b81010312610d67578138613519565b503d61361d565b906000602091828151910182855af115612501576000513d6136a857506001600160a01b0381163b155b61366e5750565b6024906001600160a01b03604051917f5274afe7000000000000000000000000000000000000000000000000000000008352166004820152fd5b60011415613667565b8051156136c057805190602001fd5b60046040517fd6bda275000000000000000000000000000000000000000000000000000000008152fd5b6020916137579360006001600160a01b036004613705612624565b0154169260405196879586948593636ccb2b0160e01b8552309260048601929360809291959460a08501966001600160a01b039384809216875216602086015260408501526001606085015216910152565b03925af16000918161376f575b506124fe5750600090565b9091506020813d60201161379b575b8161378b6020938361236f565b810103126103be57519038613764565b3d915061377e565b80548210156126ff5760005260206000200190600090565b906001820190600092818452826020526040842054908115156000146138bb57600019918083018181116138a75782549084820191821161389357818103613847575b505050805480156138335782019161381683836137a3565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b61387e61385761386793866137a3565b90549060031b1c928392866137a3565b819391549060031b91821b91600019901b19161790565b905586528460205260408620553880806137fe565b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b5050505090565b6000828152600182016020526040902054613917578054906801000000000000000082101561230557826139006138678460018096018555846137a3565b905580549260005201602052604060002055600190565b5050600090565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561394d57565b60046040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b9061398257506136b1565b815115806139cd575b613993575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561398b56fea264697066735822122005418594fc2d37bb8acf3345965a1063d8f5d797762b0fb1572d6ac2c59a7a5764736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806301681a62146121535780630c340a24146121275780631026013a1461201657806314ae9f2e14611fcc57806316f0115b14611fa757806322f3e2d414611ef25780632b3297f914611ecd5780632e1a7d4d14611d5b5780633ac9fc1114611c3b5780634032b72b14611bf1578063440d724814611bc35780634cf088d914611b9e5780634f1ef2861461194157806352d1902d146118ac5780636557ef67146117025780636cfa2a8214611293578063951dc22c14611230578063953d9cf1146109ad578063a3f4df7e14611169578063a59a997314611146578063ad3cb1cc146110f0578063b2016bd4146110c3578063c12d636b14611023578063c2b18aa014610ff0578063c415b95c14610fcb578063d2c35ce814610f2e578063d3033c3914610e8f578063df8879b814610aa1578063e5328e0614610a04578063ea8d1f0a146109dd578063ec78e832146109ad578063ee330ee31461059d578063fa24c171146101ef5763ffa1ad741461019357600080fd5b346101ec57806003193601126101ec576101e86040516101b281612337565b600581527f362e302e31000000000000000000000000000000000000000000000000000000602082015260405191829182612429565b0390f35b80fd5b50346101ec576101fe36612472565b906001600160a01b03806102106124a7565b1633036105735780610220612624565b541692604051926370a0823160e01b9182855230600486015260209485816024818a5afa90811561043f578891610546575b5061025b612715565b6040519084825230600483015286826024818b5afa801561053b57899061050c575b610287925061250d565b106104e25785836001610298612ce3565b015416604051908482523060048301528682602481845afa9182156103ca5783926104b0575b508161044a575b505050826102d1612ce3565b541660248560036102e0612ce3565b01549560026102ed612ce3565b015416604051928380928882523060048301525afa801561043f578691899161040e575b50604051631a42a82760e31b815260048101969096526024860152306044860152600060648601528480608481015b03818a855af19384156104035785946103d5575b509061035f91612e86565b610367612bec565b60246040518095819382523060048301525afa9081156103ca578391610395575b8361039283613493565b80f35b905081813d83116103c3575b6103ab818361236f565b810103126103be57610392905138610388565b600080fd5b503d6103a1565b6040513d85823e3d90fd5b849192943d83116103fc575b6103eb818361236f565b810103126103be5791839238610354565b503d6103e1565b6040513d89823e3d90fd5b82819392503d8311610438575b610425818361236f565b810103126103be57518590610340610311565b503d61041b565b6040513d8a823e3d90fd5b803b156104ac57604051627b8a6760e11b8152600481019290925230602483015282908290604490829084905af180156104a157610489575b806102c5565b610492906122f1565b61049d578538610483565b8580fd5b6040513d84823e3d90fd5b8280fd5b925090508582813d81116104db575b6104c9818361236f565b810103126103be5787915190386102be565b503d6104bf565b60046040517f850c6f76000000000000000000000000000000000000000000000000000000008152fd5b508682813d8311610534575b610522818361236f565b810103126103be57610287915161027d565b503d610518565b6040513d8b823e3d90fd5b90508581813d831161056c575b61055d818361236f565b810103126103be575138610252565b503d610553565b60046040517f82b42900000000000000000000000000000000000000000000000000000000008152fd5b50346101ec5760403660031901126101ec576001600160a01b03906004358281168082036104ac576024926105ed60056105d5612624565b01339060019160005201602052604060002054151590565b15610573576105fa612624565b92856004818654169501541690848414801561099e575b61097457604051936370a0823160e01b9283865230600487015260209889878a818b5afa96871561096957869761093a575b50604051918583523060048401528a838b81875afa92831561040357908b9695949392918893610909575b5082610718575b5050505050856040518096819382523060048301525afa90811561070c57906106dd575b6106a3925061250d565b903581106106b357604051908152f35b60046040517f8edbf6d8000000000000000000000000000000000000000000000000000000008152fd5b508382813d8311610705575b6106f3818361236f565b810103126103be576106a39151610699565b503d6106e9565b604051903d90823e3d90fd5b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821660248201529596509394929391929091908b81604481885afa90811561043f57908c959493929189916108d6575b50956107e696841161082d575b50506004610795612624565b0154604051636ccb2b0160e01b81526001600160a01b039485166004820152938a166024850152604484019290925260016064840152306084840152919384929091169082908790829060a4820190565b03925af180156103ca57908791610804575b80808080959495610675565b813d8311610826575b610817818361236f565b810103126103be5785386107f8565b503d61080d565b604051908c87830188600063095ea7b360e01b928381528785880152811960448801526044875261085d87612353565b86519082875af16000513d826108ba575b50501561087e575b505050610789565b6108b0946108ab92604051928b84015282015260006044820152604481526108a581612353565b8261363d565b61363d565b3880808c81610876565b9091506108ce5750873b15155b388061086e565b6001146108c7565b86819792503d8311610902575b6108ed818361236f565b810103126103be5793518b94906107e661077c565b503d6108e3565b8781989294503d8311610933575b610921818361236f565b810103126103be578a9551913861066e565b503d610917565b9096508981813d8311610962575b610952818361236f565b810103126103be57519538610643565b503d610948565b6040513d88823e3d90fd5b60046040517fb92ab523000000000000000000000000000000000000000000000000000000008152fd5b506109a884612530565b610611565b50346101ec57806003193601126101ec5760206001600160a01b0360026109d2612ce3565b015416604051908152f35b50346101ec57806003193601126101ec57602060036109fa612ce3565b0154604051908152f35b50346101ec57806003193601126101ec57602460206001600160a01b03610a29612624565b5416604051928380926370a0823160e01b82523060048301525afa91821561070c5791610a6d575b6020610a6583610a5f613193565b90612617565b604051908152f35b90506020813d602011610a99575b81610a886020938361236f565b810103126103be5751610a65610a51565b3d9150610a7b565b50346101ec57610ab036612472565b9190610abf60056105d5612624565b1561057357819082936001600160a01b0391826001610adc612624565b01541694604051907fd53ddc260000000000000000000000000000000000000000000000000000000082523060048301526020602495818488818c5afa9384156103ca578394610e60575b50604051907f9f2b2833000000000000000000000000000000000000000000000000000000008252306004830152828289818d5afa918215610d5c578492610e31575b50610b73612624565b541693604051906370a0823160e01b9283835230600484015284838b818a5afa928315610969578693610e02575b50829a610bb5610baf613193565b85612617565b9082821115610df0575090610bc99161250d565b915b610bd58284612617565b818111610d75575b5050898118818b100218988980821115610d6b57610bfa9161250d565b8180821091180218985b803b15610d67576040517f05bed046000000000000000000000000000000000000000000000000000000008152600481018b9052602481018c9052604481018a90529084908290606490829084905af18015610d5c57610d49575b508190876040518096819382523060048301525afa91821561070c5791610d19575b50610c8c9150613493565b8410610ce9578411610cba57506101e890604051938493846040919493926060820195825260208201520152565b83604051907fbfa80dbe0000000000000000000000000000000000000000000000000000000082526004820152fd5b5082604051907fcc71aff40000000000000000000000000000000000000000000000000000000082526004820152fd5b905081813d8311610d42575b610d2f818361236f565b810103126103be57610c8c905138610c81565b503d610d25565b92610d558392946122f1565b9290610c5f565b6040513d86823e3d90fd5b8380fd5b5050508298610c04565b610d8a929b5090610d859161250d565b61287e565b60405182815230600482015283818a81895afa908115610de5578591610db4575b50983880610bdd565b90508381813d8311610dde575b610dcb818361236f565b81010312610dda575138610dab565b8480fd5b503d610dc1565b6040513d87823e3d90fd5b939d50610dfc9161250d565b9b610bcb565b9092508481813d8311610e2a575b610e1a818361236f565b8101031261049d57519138610ba1565b503d610e10565b9091508281813d8311610e59575b610e49818361236f565b81010312610d6757519038610b6a565b503d610e3f565b9093508181813d8311610e88575b610e78818361236f565b810103126104ac57519238610b27565b503d610e6e565b50346101ec5760203660031901126101ec576004356001600160a01b03908181168091036104ac5781610ec06124a7565b163303610573578015610f1d576001600160a01b03196004610ee0612624565b01927f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe604085549281519084168152856020820152a11617905580f35b600460405163fb7566d760e01b8152fd5b50346101ec5760203660031901126101ec57610f486122db565b6001600160a01b0380610f596124a7565b16330361057357808216908115610f1d576001600160a01b0319907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b97066003610f9f612624565b018054604080519482166001600160a01b03908116865297909716602085015290959092a11617905580f35b50346101ec57806003193601126101ec5760206001600160a01b0360036109d2612624565b50346101ec57806003193601126101ec576101e86110176004611011612ce3565b016125bb565b604051918291826123e4565b50346101ec57806003193601126101ec5760046001600160a01b03602081600161104b612624565b015416604051938480927fc12d636b0000000000000000000000000000000000000000000000000000000082525afa9182156103ca5760209392611094575b5060405191168152f35b6110b5919250833d85116110bc575b6110ad818361236f565b810190612488565b903861108a565b503d6110a3565b50346101ec57806003193601126101ec5760206001600160a01b036110e6612624565b5416604051908152f35b50346101ec57806003193601126101ec576101e860405161111081612337565b600581527f352e302e30000000000000000000000000000000000000000000000000000000602082015260405191829182612429565b50346101ec57806003193601126101ec5760206001600160a01b036110e6612ce3565b50346101ec57806003193601126101ec576007611184612624565b016040519082815461119581612581565b9182855260209360019260018116908160001461120c57506001146111d1575b6101e8866111c5818a038261236f565b60405191829182612429565b9080949650528483205b8284106111f957505050816101e8936111c5928201019338806111b5565b80548585018701529285019281016111db565b60ff19168787015250505050151560051b82010191506111c5816101e838806111b5565b50346101ec57806003193601126101ec57600561124b612624565b604051910180548083529083526020808420818401949092915b82821061127c576101e8856110178189038261236f565b835486529485019460019384019390910190611265565b50346101ec5760a03660031901126101ec576112ad6122db565b6024356001600160a01b03811681036104ac576001600160a01b0360443516604435036104ac5760843567ffffffffffffffff8111610d675736602382011215610d67576113059036906024816004013591016123ad565b917ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549267ffffffffffffffff8416801590816116f2575b60011490816116e8575b1590816116df575b506116b557600167ffffffffffffffff19851617855560ff8460401c1615611696575b61137c61391e565b61138461391e565b6001600160a01b038316158015611685575b801561167e575b610f1d576113a9612624565b92600184016001600160a01b0382166001600160a01b031982541617905560405190637e062a3560e11b82526020826004816001600160a01b0385165afa90811561043f576001600160a01b0360209281948b91611661575b50166001600160a01b03198754161786556002860160016001600160a01b031982541617905560046040518094819363030d028960e21b8352165afa908115610403578791611642575b506001600160a01b036003850191166001600160a01b03198254161790556001600160a01b036004840191166001600160a01b0319825416179055600782019080519067ffffffffffffffff821161162e576114a88354612581565b601f81116115f3575b50602090601f831160011461158a576114ee9493929188918361157f575b50508160011b916000199060031b1c19161790555b60053391016138c2565b506001600160a01b036044351615610f1d5760ff9061150b612ce3565b6001600160a01b03604435166001600160a01b0319825416179055611534606435604435612e86565b60401c1615611541575080f35b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b0151905038806114cf565b838852602088209190601f198416895b8181106115db57509160019391856114ee98979694106115c2575b505050811b0190556114e4565b015160001960f88460031b161c191690553880806115b5565b9293602060018192878601518155019501930161159a565b61161e9084895260208920601f850160051c81019160208610611624575b601f0160051c019061256a565b386114b1565b9091508190611611565b602487634e487b7160e01b81526041600452fd5b61165b915060203d6020116110bc576110ad818361236f565b3861144c565b6116789150843d86116110bc576110ad818361236f565b38611402565b508561139d565b506001600160a01b03811615611396565b68ffffffffffffffffff19841668010000000000000001178555611374565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b90501538611351565b303b159150611349565b604086901c60ff1615915061133f565b50346101ec576020806003193601126118a8576001600160a01b0390816117276124a7565b1633036105735781611737612624565b54166040516370a0823160e01b908181523060048201528381602481865afa9182156109695784918793611877575b5061176f612715565b60246040518095819382523060048301525afa918215610de5578592611846575b5061179e906004359261250d565b106104e2576117ab612d32565b9160046117b6612ce3565b019183519367ffffffffffffffff8511611832576801000000000000000085116118325781908454868655808710611818575b500192855280852091855b8581106118045786610392612bec565b8451821684820155938201936001016117f4565b85885282882061182c91810190880161256a565b386117e9565b602486634e487b7160e01b81526041600452fd5b9091508281813d8311611870575b61185e818361236f565b81010312610dda57519061179e611790565b503d611854565b8281939294503d83116118a1575b61188f818361236f565b8101031261049d578390519138611766565b503d611885565b5080fd5b50346101ec57806003193601126101ec576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119175760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60046040517fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b5060403660031901126101ec576119566122db565b60243567ffffffffffffffff81116104ac57366023820112156104ac576119879036906024816004013591016123ad565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016803014908115611b70575b5061191757806119cb6124a7565b163303610573578216916040517f52d1902d000000000000000000000000000000000000000000000000000000008152602081600481875afa859181611b3c575b50611a295760248460405190634c9c8ce360e01b82526004820152fd5b9284937f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90818103611b0b5750823b15611af35780546001600160a01b0319168217905560405184917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2835115611abe575080836020611aba95519101845af4611ab46126bb565b91613977565b5080f35b9250505034611acb575080f35b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b60248260405190634c9c8ce360e01b82526004820152fd5b602490604051907faa1d49a40000000000000000000000000000000000000000000000000000000082526004820152fd5b9091506020813d602011611b68575b81611b586020938361236f565b8101031261049d57519038611a0c565b3d9150611b4b565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54161415386119bd565b50346101ec57806003193601126101ec5760206001600160a01b0360016109d2612ce3565b50346101ec5760203660031901126101ec576020611be7611be26122db565b612530565b6040519015158152f35b50346101ec5760203660031901126101ec57611c0b6122db565b6001600160a01b039081611c1d6124a7565b16330361057357611aba916005611c32612624565b019116906138c2565b50346101ec5760203660031901126101ec57600435611c5d60056105d5612624565b1561057357611c6a612624565b906001600160a01b0390611c8a81838554168460018097015416906133d1565b611c92612ce3565b611d1b82604051611ca28161231b565b8584541681528580806001870154169560208401968752611d1085611ce16004856002860154169460408901958652600381015460608a0152016125bb565b9860808701998a52611d028286611cf6612624565b5416878a5116906133d1565b8480855116915116906133d1565b5116915116906133d1565b826004611d26612624565b015416905192835193865b858110611d3c578780f35b80611d55868686611d4e8c96886126eb565b51166133d1565b01611d31565b50346101ec576020806003193601126118a8576004356001600160a01b03806001611d84612624565b015416330361057357806001611d98612624565b0154169060405190637e062a3560e11b82528482600481865afa918215610969578692611eae575b508116604051946370a0823160e01b8087523060048801528187602481865afa96871561043f578897611e7b575b50858710611e03575050506103929350612666565b611e14610d8587949884969861250d565b60246040518098819382523060048301525afa918215610969578692611e49575b506103929450818082109118021891612666565b90915084813d8311611e74575b611e60818361236f565b81010312610dda5761039293519038611e35565b503d611e56565b9096508181813d8311611ea7575b611e93818361236f565b81010312611ea357519538611dee565b8780fd5b503d611e89565b611ec6919250853d87116110bc576110ad818361236f565b9038611dc0565b50346101ec57806003193601126101ec5760206001600160a01b0360046109d2612624565b50346101ec57806003193601126101ec576001600160a01b036001611f15612624565b01541660405180917f228bfd9f0000000000000000000000000000000000000000000000000000000082523060048301528160246101209485935afa9182156103ca578392611f6c575b6020836040519015158152f35b90809250813d8311611fa0575b611f83818361236f565b810103126118a8575180151581036118a857602091503880611f5f565b503d611f79565b50346101ec57806003193601126101ec5760206001600160a01b0360016109d2612624565b50346101ec5760203660031901126101ec57611fe66122db565b6001600160a01b039081611ff86124a7565b16330361057357611aba91600561200d612624565b019116906137bb565b50346101ec576020806003193601126118a85761203660056105d5612624565b15610573576001600160a01b0361204b612624565b5416604051906370a0823160e01b918281523060048201528381602481855afa928315610de557849186946120f6575b50612084612715565b60246040518094819382523060048301525afa908115610d5c5784916120c2575b506120b192935061250d565b60043581106106b357604051908152f35b90508281813d83116120ef575b6120d9818361236f565b81010312610d67576120b19293505183926120a5565b503d6120cf565b8281939295503d8311612120575b61210e818361236f565b81010312610dda57839051923861207b565b503d612104565b50346101ec57806003193601126101ec5760206121426124a7565b6001600160a01b0360405191168152f35b50346101ec5760203660031901126101ec5761216d6122db565b61217a60056105d5612624565b15610573576001600160a01b03806003612192612624565b0154169182156122b157816121a5612624565b54169181169182149081156122a1575b506109745773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103612236575047908147106121fe578280809381935af16121ef6126bb565b90156121f9575080f35b6136b1565b6044824790604051917fcf47918100000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b604051916370a0823160e01b8352306004840152602083602481855afa918215610d5c57849261226b575b6103929350612666565b91506020833d602011612299575b816122866020938361236f565b81010312610d6757610392925191612261565b3d9150612279565b6122ab9150612530565b386121b5565b60046040517fb4b53f42000000000000000000000000000000000000000000000000000000008152fd5b600435906001600160a01b03821682036103be57565b67ffffffffffffffff811161230557604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761230557604052565b6040810190811067ffffffffffffffff82111761230557604052565b6080810190811067ffffffffffffffff82111761230557604052565b90601f8019910116810190811067ffffffffffffffff82111761230557604052565b67ffffffffffffffff811161230557601f01601f191660200190565b9291926123b982612391565b916123c7604051938461236f565b8294818452818301116103be578281602093846000960137010152565b602090602060408183019282815285518094520193019160005b82811061240c575050505090565b83516001600160a01b0316855293810193928101926001016123fe565b6020808252825181830181905290939260005b82811061245e57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161243c565b60409060031901126103be576004359060243590565b908160209103126103be57516001600160a01b03811681036103be5790565b600460206001600160a01b0360016124bd612624565b0154166040519283809263030d028960e21b82525afa908115612501576000916124e5575090565b6124fe915060203d6020116110bc576110ad818361236f565b90565b6040513d6000823e3d90fd5b9190820391821161251a57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081806002612545612ce3565b015416911690811491821561255957505090565b909150612564612624565b54161490565b818110612575575050565b6000815560010161256a565b90600182811c921680156125b1575b602083101461259b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612590565b90604051918281549182825260209260208301916000526020600020936000905b8282106125f4575050506125f29250038361236f565b565b85546001600160a01b0316845260019586019588955093810193909101906125dc565b9190820180921161251a57565b604051602081017f2406840ad5584694fd0fd68ca814242285d2c2d94aaaee51ccea0b7e08ea3d5b81526020825261265b82612337565b9051902060ff191690565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039290921660248301526044808301939093529181526125f2916108ab60648361236f565b3d156126e6573d906126cc82612391565b916126da604051938461236f565b82523d6000602084013e565b606090565b80518210156126ff5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b600180612720612ce3565b01906000916001600160a01b038091541690813b15610d67576040906040517f4e71d92d00000000000000000000000000000000000000000000000000000000815285816004818382985af180156109695761286b575b5080612781612624565b5416906127916004611011612ce3565b805194875b8681106127a857505050505050505050565b836127b382856126eb565b5116865180916370a0823160e01b8252308583015281602460209485935afa91821561286157908a9392918c92612830575b50508015158061281a575b6127fc575b5001612796565b61281390878761280c85896126eb565b51166136ea565b50386127f5565b50868661282784886126eb565b511614156127f0565b8194508092503d831161285a575b612848818361236f565b810103126103be5788915138806127e5565b503d61283e565b88513d8d823e3d90fd5b612877909591956122f1565b9338612777565b612886613193565b61288e612624565b9060006001600160a01b0380935416928060026128a9612ce3565b0154166040938451968780926370a0823160e01b988983526004958684015260209a8b9160249687915afa918215612be2578792612bb3575b50818082109118021890818082109118029081811891670de0b6b3a76400008084029384041491141715612ba15783612919612ce3565b541690886003612927612ce3565b0154848951809581936337e2beb760e21b8352898301525afa918215612b23578692612b72575b508115612b60570495819088856002612965612ce3565b01541688519485809285825230898301525afa928315612b23578693612b31575b5082808911612a47575b505050856129a2575b50505050505050565b86926129ac612ce3565b5416908460036129ba612ce3565b01548751631a42a82760e31b815294850190815288831898831198909802909118602088015230604088015260006060880152919586928391829060800103925af1918215612a3d575050612a14575b8080808080612999565b813d8311612a36575b612a27818361236f565b810103126103be573880612a0a565b503d612a1d565b51903d90823e3d90fd5b612a54919293508861250d565b846001612a5f612ce3565b01541690813b15612b2d578751627b8a6760e11b815285810191825230602083015291879183919082908490829060400103925af18015612b235790899291612b10575b50846002612aaf612ce3565b01541692875180948193825230878301525afa908115612b06578491612ad9575b50388080612990565b90508681813d8311612aff575b612af0818361236f565b810103126103be575138612ad0565b503d612ae6565b85513d86823e3d90fd5b612b1c909691966122f1565b9438612aa3565b87513d88823e3d90fd5b8680fd5b9092508881813d8311612b59575b612b49818361236f565b8101031261049d57519138612986565b503d612b3f565b8286601286634e487b7160e01b835252fd5b9091508881813d8311612b9a575b612b8a818361236f565b8101031261049d5751903861294e565b503d612b80565b5083601183634e487b7160e01b835252fd5b9091508981813d8311612bdb575b612bcb818361236f565b81010312612b2d575190386128e2565b503d612bc1565b88513d89823e3d90fd5b612bf4612624565b6001600160a01b03612c118183541682600180950154169061331d565b612c19612ce3565b612c9f604051612c288161231b565b8383541681528380806001860154169460208401958652612c94612c66600484600285015416936040880194855260038101546060890152016125bb565b9660808601978852612c8684612c7a612624565b5416858851169061331d565b83808451169151169061331d565b51169151169061331d565b816004612caa612624565b01541690519182519260005b848110612cc557505050505050565b80612cdd8585612cd68a95876126eb565b511661331d565b01612cb6565b604051602081017f4d9eed546e4705919557215ec319fca3fd5305ca57b19dffaf31b2484c6f5f6a81526020825261265b82612337565b67ffffffffffffffff81116123055760051b60200190565b6001600160a01b03906001826001612d48612ce3565b0154169260408051917f8de4e99000000000000000000000000000000000000000000000000000000000835260206004968185600481845afa94851561250157600095612e57575b50612d9a85612d1a565b91612da8604051938461236f565b858352601f19612db787612d1a565b013682850137829860005b878110612dd457505050505050505050565b86517f7bb7bed100000000000000000000000000000000000000000000000000000000815281838201528381602481885afa908115612e4c57908a9291600091612e2f575b5087612e2583896126eb565b9116905201612dc2565b612e469150853d87116110bc576110ad818361236f565b38612e19565b88513d6000823e3d90fd5b90948282813d8311612e7f575b612e6e818361236f565b810103126101ec5750519338612d90565b503d612e64565b906001600160a01b038092169060409283517fdd57691100000000000000000000000000000000000000000000000000000000815260049383858301526020918281602481855afa9081156130d257600091613176575b508380612ee8612624565b541691160361314e5785517f5401889600000000000000000000000000000000000000000000000000000000815284868201528281602481855afa9081156130d257908491600091613131575b50169081156131225786517fa59a997300000000000000000000000000000000000000000000000000000000815283818881865afa908115612e4c5782918691600091613105575b5016036130dd57826024918851928380927f5c6b6782000000000000000000000000000000000000000000000000000000008252898b8301525afa9081156130d2579084916000916130b5575b50169586156130a65750612fdc612ce3565b936003850155600284016001600160a01b0319918282541617905560019560018501918254161790558361300e612d32565b93019280519467ffffffffffffffff861161309157680100000000000000008611613091575081908454868655808710613074575b500192600052806000209160005b8581106130615750505050505050565b8451821684820155938201938601613051565b61308b90866000528784600020918201910161256a565b38613043565b604190634e487b7160e01b6000525260246000fd5b85905163fb7566d760e01b8152fd5b6130cc9150843d86116110bc576110ad818361236f565b38612fca565b87513d6000823e3d90fd5b8587517fd8cad676000000000000000000000000000000000000000000000000000000008152fd5b61311c9150863d88116110bc576110ad818361236f565b38612f7d565b85875163fb7566d760e01b8152fd5b6131489150843d86116110bc576110ad818361236f565b38612f35565b8486517fe46aea09000000000000000000000000000000000000000000000000000000008152fd5b61318d9150833d85116110bc576110ad818361236f565b38612edd565b6001600160a01b038060026131a6612ce3565b01541690604091825190816370a0823160e01b9182825230600483015281602460209586935afa9081156132e5576000916132f0575b50828460016131e9612ce3565b01541692602487518095819382523060048301525afa9081156132e5576000916132b4575b6132189250612617565b91613221612ce3565b54169080600361322f612ce3565b015460248651809581936337e2beb760e21b835260048301525afa9384156132aa575060009361327a575b505081810291818304149015171561251a57670de0b6b3a7640000900490565b9080929350813d83116132a3575b613292818361236f565b810103126103be575190388061325a565b503d613288565b513d6000823e3d90fd5b90508282813d83116132de575b6132cb818361236f565b810103126103be5761321891519061320e565b503d6132c1565b85513d6000823e3d90fd5b90508281813d8311613316575b613307818361236f565b810103126103be5751386131dc565b503d6132fd565b604051906020820163095ea7b360e01b93848252602060006001600160a01b0380931693846024880152811960448801526044875261335b87612353565b86519082875af1903d60005190836133b0575b5050501561337d575b50505050565b6133a7936108ab91604051916020830152602482015260006044820152604481526108a581612353565b38808080613377565b919250906133c7575082163b15155b38808061336e565b60019150146133bf565b604051916020600081850161341d8661340f63095ea7b360e01b998a85528760248401602090939291936001600160a01b0360408201951681520152565b03601f19810188528761236f565b85519082865af16000513d8261346e575b50501561343b5750505050565b6133a7936001600160a01b036108ab9260405192602084015216602482015260006044820152604481526108a581612353565b90915061348b57506001600160a01b0382163b15155b388061342e565b600114613484565b8061349b5750565b6001600160a01b0390816134ad612ce3565b541660036134b9612ce3565b0154926040928351947f1de8a7c20000000000000000000000000000000000000000000000000000000086526004860152602485015230604485015260009384928360648301528160848160209687945af1801561360a57908391613614575b50602490826002613528612ce3565b0154168551928380926370a0823160e01b82523060048301525afa92831561360a5785936135da575b50508161355e5750505050565b6001613568612ce3565b01541690813b15610d675782517f7acb77570000000000000000000000000000000000000000000000000000000081526004810191909152306024820152929081908490604490829084905af1918215612a3d5750506135cb575b808080613377565b6135d4906122f1565b386135c3565b9080929350813d8311613603575b6135f2818361236f565b81010312610d675751903880613551565b503d6135e8565b84513d87823e3d90fd5b813d8311613636575b613627818361236f565b81010312610d67578138613519565b503d61361d565b906000602091828151910182855af115612501576000513d6136a857506001600160a01b0381163b155b61366e5750565b6024906001600160a01b03604051917f5274afe7000000000000000000000000000000000000000000000000000000008352166004820152fd5b60011415613667565b8051156136c057805190602001fd5b60046040517fd6bda275000000000000000000000000000000000000000000000000000000008152fd5b6020916137579360006001600160a01b036004613705612624565b0154169260405196879586948593636ccb2b0160e01b8552309260048601929360809291959460a08501966001600160a01b039384809216875216602086015260408501526001606085015216910152565b03925af16000918161376f575b506124fe5750600090565b9091506020813d60201161379b575b8161378b6020938361236f565b810103126103be57519038613764565b3d915061377e565b80548210156126ff5760005260206000200190600090565b906001820190600092818452826020526040842054908115156000146138bb57600019918083018181116138a75782549084820191821161389357818103613847575b505050805480156138335782019161381683836137a3565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b61387e61385761386793866137a3565b90549060031b1c928392866137a3565b819391549060031b91821b91600019901b19161790565b905586528460205260408620553880806137fe565b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b5050505090565b6000828152600182016020526040902054613917578054906801000000000000000082101561230557826139006138678460018096018555846137a3565b905580549260005201602052604060002055600190565b5050600090565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561394d57565b60046040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b9061398257506136b1565b815115806139cd575b613993575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561398b56fea264697066735822122005418594fc2d37bb8acf3345965a1063d8f5d797762b0fb1572d6ac2c59a7a5764736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "keeperAddress_": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "OnlyKeeper: Approve all required tokens"
      },
      "claimAndSwapRewards(uint256)": {
        "details": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rebalance(uint256,uint256)": {
        "params": {
          "maxLoss_": "Maximum accepted loss for this call.",
          "minProfit_": "Minimum profit expected from this call."
        },
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "receiptToken()": {
        "details": "override receiptToken as eToken can be updated via migrateReserve function"
      },
      "removeKeeper(address)": {
        "params": {
          "keeperAddress_": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "fromToken_": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "feeCollector_": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "swapper_": "swapper address"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "params": {
          "amount_": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in Extra Finance and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "onlyGovernor: Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "OnlyKeeper: Claim rewards from protocol."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrateReserve(uint256,uint256)": {
        "notice": "Migrate funds to another reserve that supports' the same collateral"
      },
      "rebalance(uint256,uint256)": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "refetchRewardTokens(uint256)": {
        "notice": "Rewards token can be updated any time. This method refresh list"
      },
      "removeKeeper(address)": {
        "notice": "onlyGovernor: Remove given address from keepers list."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "onlyKeeper: sweep given token to feeCollector of strategy"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateFeeCollector(address)": {
        "notice": "onlyGovernor: Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "onlyGovernor: Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "onlyPool: Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}